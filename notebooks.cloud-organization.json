{"version":2,"kind":"Notebook","sha256":"d493c15121d4de121037e4be05c6c01c8638d95f8a14830cb7460bc83ea84468","slug":"notebooks.cloud-organization","location":"/notebooks/cloud_organization.ipynb","dependencies":[],"frontmatter":{"title":"LASSO - LES simulations with different Large-Scale forcing scales for 4th April 2019 over SGP","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true},"code":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/projectpythia/lasso-those-clouds-cookbook","copyright":"2024","numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/lasso-those-clouds-cookbook/blob/main/notebooks/cloud_organization.ipynb","exports":[{"format":"ipynb","filename":"cloud_organization.ipynb","url":"/lasso-those-clouds-cookbook/build/cloud_organization-2a60091e138107b9f08ba04e76e146c7.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Libraries required for this tutorial...\n\n# import dask\nfrom datetime import datetime\nimport numpy as np\nimport xarray as xr\nimport xwrf\n\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot as pl\n# Plotting wrfstat variables...\nfrom distributed import Client\nclient = Client(\"tcp://127.0.0.1:44455\")\npath_shcu_root = \"/data/project/ARM_Summer_School_2024_Data/lasso_tutorial/ShCu/untar\"  # on Jupyter\n\ncase_date = datetime(2019, 4, 4)\nsim_id = [6,7,8]","key":"zHOsKaFiRZ"},{"type":"output","id":"ngp5bSZ3LJcWhPTggJev5","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/xwrf/__init__.py:5: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.\n  from pkg_resources import DistributionNotFound, get_distribution\n"},{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mConnectionRefusedError\u001b[39m                    Traceback (most recent call last)\n\u001b[31mConnectionRefusedError\u001b[39m: [Errno 111] Connection refused\n\nThe above exception was the direct cause of the following exception:\n\n\u001b[31mCommClosedError\u001b[39m                           Traceback (most recent call last)\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/distributed/comm/core.py:342\u001b[39m, in \u001b[36mconnect\u001b[39m\u001b[34m(addr, timeout, deserialize, handshake_overrides, **connection_args)\u001b[39m\n\u001b[32m    341\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m342\u001b[39m     comm = \u001b[38;5;28;01mawait\u001b[39;00m wait_for(\n\u001b[32m    343\u001b[39m         connector.connect(loc, deserialize=deserialize, **connection_args),\n\u001b[32m    344\u001b[39m         timeout=\u001b[38;5;28mmin\u001b[39m(intermediate_cap, time_left()),\n\u001b[32m    345\u001b[39m     )\n\u001b[32m    346\u001b[39m     \u001b[38;5;28;01mbreak\u001b[39;00m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/distributed/utils.py:1923\u001b[39m, in \u001b[36mwait_for\u001b[39m\u001b[34m(fut, timeout)\u001b[39m\n\u001b[32m   1922\u001b[39m \u001b[38;5;28;01masync\u001b[39;00m \u001b[38;5;28;01mwith\u001b[39;00m asyncio.timeout(timeout):\n\u001b[32m-> \u001b[39m\u001b[32m1923\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mawait\u001b[39;00m fut\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/distributed/comm/tcp.py:560\u001b[39m, in \u001b[36mBaseTCPConnector.connect\u001b[39m\u001b[34m(self, address, deserialize, **connection_args)\u001b[39m\n\u001b[32m    558\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m StreamClosedError \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[32m    559\u001b[39m     \u001b[38;5;66;03m# The socket connect() call failed\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m560\u001b[39m     \u001b[43mconvert_stream_closed_error\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43me\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    561\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m SSLCertVerificationError \u001b[38;5;28;01mas\u001b[39;00m err:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/distributed/comm/tcp.py:143\u001b[39m, in \u001b[36mconvert_stream_closed_error\u001b[39m\u001b[34m(obj, exc)\u001b[39m\n\u001b[32m    142\u001b[39m         \u001b[38;5;28;01mraise\u001b[39;00m FatalCommClosedError(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33min \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mobj\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mexc.\u001b[34m__class__\u001b[39m.\u001b[34m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mexc\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m)\n\u001b[32m--> \u001b[39m\u001b[32m143\u001b[39m \u001b[38;5;28;01mraise\u001b[39;00m CommClosedError(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33min \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mobj\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mexc.\u001b[34m__class__\u001b[39m.\u001b[34m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mexc\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mexc\u001b[39;00m\n\n\u001b[31mCommClosedError\u001b[39m: in <distributed.comm.tcp.TCPConnector object at 0x7f30af5e2f90>: ConnectionRefusedError: [Errno 111] Connection refused\n\nThe above exception was the direct cause of the following exception:\n\n\u001b[31mOSError\u001b[39m                                   Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[1]\u001b[39m\u001b[32m, line 13\u001b[39m\n\u001b[32m     11\u001b[39m \u001b[38;5;66;03m# Plotting wrfstat variables...\u001b[39;00m\n\u001b[32m     12\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mdistributed\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m Client\n\u001b[32m---> \u001b[39m\u001b[32m13\u001b[39m client = \u001b[43mClient\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mtcp://127.0.0.1:44455\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[32m     14\u001b[39m path_shcu_root = \u001b[33m\"\u001b[39m\u001b[33m/data/project/ARM_Summer_School_2024_Data/lasso_tutorial/ShCu/untar\u001b[39m\u001b[33m\"\u001b[39m  \u001b[38;5;66;03m# on Jupyter\u001b[39;00m\n\u001b[32m     16\u001b[39m case_date = datetime(\u001b[32m2019\u001b[39m, \u001b[32m4\u001b[39m, \u001b[32m4\u001b[39m)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/distributed/client.py:1203\u001b[39m, in \u001b[36mClient.__init__\u001b[39m\u001b[34m(self, address, loop, timeout, set_as_default, scheduler_file, security, asynchronous, name, heartbeat_interval, serializers, deserializers, extensions, direct_to_workers, connection_limit, **kwargs)\u001b[39m\n\u001b[32m   1200\u001b[39m preload_argv = dask.config.get(\u001b[33m\"\u001b[39m\u001b[33mdistributed.client.preload-argv\u001b[39m\u001b[33m\"\u001b[39m)\n\u001b[32m   1201\u001b[39m \u001b[38;5;28mself\u001b[39m.preloads = preloading.process_preloads(\u001b[38;5;28mself\u001b[39m, preload, preload_argv)\n\u001b[32m-> \u001b[39m\u001b[32m1203\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mstart\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtimeout\u001b[49m\u001b[43m=\u001b[49m\u001b[43mtimeout\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1204\u001b[39m Client._instances.add(\u001b[38;5;28mself\u001b[39m)\n\u001b[32m   1206\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mdistributed\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mrecreate_tasks\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m ReplayTaskClient\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/distributed/client.py:1403\u001b[39m, in \u001b[36mClient.start\u001b[39m\u001b[34m(self, **kwargs)\u001b[39m\n\u001b[32m   1401\u001b[39m     \u001b[38;5;28mself\u001b[39m._started = asyncio.ensure_future(\u001b[38;5;28mself\u001b[39m._start(**kwargs))\n\u001b[32m   1402\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m-> \u001b[39m\u001b[32m1403\u001b[39m     \u001b[43msync\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mloop\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_start\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/distributed/utils.py:452\u001b[39m, in \u001b[36msync\u001b[39m\u001b[34m(loop, func, callback_timeout, *args, **kwargs)\u001b[39m\n\u001b[32m    449\u001b[39m         wait(\u001b[32m10\u001b[39m)\n\u001b[32m    451\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m error \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m452\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m error\n\u001b[32m    453\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    454\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m result\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/distributed/utils.py:426\u001b[39m, in \u001b[36msync.<locals>.f\u001b[39m\u001b[34m()\u001b[39m\n\u001b[32m    424\u001b[39m         awaitable = wait_for(awaitable, timeout)\n\u001b[32m    425\u001b[39m     future = asyncio.ensure_future(awaitable)\n\u001b[32m--> \u001b[39m\u001b[32m426\u001b[39m     result = \u001b[38;5;28;01myield\u001b[39;00m future\n\u001b[32m    427\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m exception:\n\u001b[32m    428\u001b[39m     error = exception\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/tornado/gen.py:769\u001b[39m, in \u001b[36mRunner.run\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m    767\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m    768\u001b[39m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m769\u001b[39m         value = \u001b[43mfuture\u001b[49m\u001b[43m.\u001b[49m\u001b[43mresult\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    770\u001b[39m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[32m    771\u001b[39m         \u001b[38;5;66;03m# Save the exception for later. It's important that\u001b[39;00m\n\u001b[32m    772\u001b[39m         \u001b[38;5;66;03m# gen.throw() not be called inside this try/except block\u001b[39;00m\n\u001b[32m    773\u001b[39m         \u001b[38;5;66;03m# because that makes sys.exc_info behave unexpectedly.\u001b[39;00m\n\u001b[32m    774\u001b[39m         exc: Optional[\u001b[38;5;167;01mException\u001b[39;00m] = e\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/distributed/client.py:1481\u001b[39m, in \u001b[36mClient._start\u001b[39m\u001b[34m(self, timeout, **kwargs)\u001b[39m\n\u001b[32m   1478\u001b[39m \u001b[38;5;28mself\u001b[39m.scheduler_comm = \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[32m   1480\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m-> \u001b[39m\u001b[32m1481\u001b[39m     \u001b[38;5;28;01mawait\u001b[39;00m \u001b[38;5;28mself\u001b[39m._ensure_connected(timeout=timeout)\n\u001b[32m   1482\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m (\u001b[38;5;167;01mOSError\u001b[39;00m, \u001b[38;5;167;01mImportError\u001b[39;00m):\n\u001b[32m   1483\u001b[39m     \u001b[38;5;28;01mawait\u001b[39;00m \u001b[38;5;28mself\u001b[39m._close()\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/distributed/client.py:1549\u001b[39m, in \u001b[36mClient._ensure_connected\u001b[39m\u001b[34m(self, timeout)\u001b[39m\n\u001b[32m   1546\u001b[39m \u001b[38;5;28mself\u001b[39m._connecting_to_scheduler = \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[32m   1548\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m-> \u001b[39m\u001b[32m1549\u001b[39m     comm = \u001b[38;5;28;01mawait\u001b[39;00m connect(\n\u001b[32m   1550\u001b[39m         \u001b[38;5;28mself\u001b[39m.scheduler.address, timeout=timeout, **\u001b[38;5;28mself\u001b[39m.connection_args\n\u001b[32m   1551\u001b[39m     )\n\u001b[32m   1552\u001b[39m     comm.name = \u001b[33m\"\u001b[39m\u001b[33mClient->Scheduler\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m   1553\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m timeout \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/distributed/comm/core.py:368\u001b[39m, in \u001b[36mconnect\u001b[39m\u001b[34m(addr, timeout, deserialize, handshake_overrides, **connection_args)\u001b[39m\n\u001b[32m    366\u001b[39m         \u001b[38;5;28;01mawait\u001b[39;00m asyncio.sleep(backoff)\n\u001b[32m    367\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m368\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mOSError\u001b[39;00m(\n\u001b[32m    369\u001b[39m         \u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mTimed out trying to connect to \u001b[39m\u001b[38;5;132;01m{\u001b[39;00maddr\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m after \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mtimeout\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m s\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    370\u001b[39m     ) \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mactive_exception\u001b[39;00m\n\u001b[32m    372\u001b[39m local_info = {\n\u001b[32m    373\u001b[39m     **comm.handshake_info(),\n\u001b[32m    374\u001b[39m     **(handshake_overrides \u001b[38;5;129;01mor\u001b[39;00m {}),\n\u001b[32m    375\u001b[39m }\n\u001b[32m    376\u001b[39m \u001b[38;5;28;01mawait\u001b[39;00m comm.write(local_info)\n\n\u001b[31mOSError\u001b[39m: Timed out trying to connect to tcp://127.0.0.1:44455 after 30 s","ename":"OSError","evalue":"Timed out trying to connect to tcp://127.0.0.1:44455 after 30 s"}],"key":"GHN9qX59eu"}],"key":"K4I03tHACl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds_stat_1 = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id[0]:04d}/raw_model/wrfstat_d01_{case_date:%Y-%m-%d_12:00:00}.nc\")\nds_stat_2 = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id[1]:04d}/raw_model/wrfstat_d01_{case_date:%Y-%m-%d_12:00:00}.nc\")\nds_stat_3 = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id[2]:04d}/raw_model/wrfstat_d01_{case_date:%Y-%m-%d_12:00:00}.nc\")\nds_stat_1 = ds_stat_1.assign_coords(height=(ds_stat_1[\"CSP_Z\"]))\nds_stat_2 = ds_stat_2.assign_coords(height=(ds_stat_2[\"CSP_Z\"]))\nds_stat_3 = ds_stat_3.assign_coords(height=(ds_stat_3[\"CSP_Z\"]))\nds_stat_3[\"Time\"] = ds_stat_3[\"XTIME\"]\nds_stat_2[\"Time\"] = ds_stat_2[\"XTIME\"]\nds_stat_1[\"Time\"] = ds_stat_1[\"XTIME\"]\n\n# Note the extra details required by open_mfdataset to connect the files together in time.\nds_xwrf_1 = xr.open_mfdataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id[0]:04d}/raw_model/wrfout_d01_*.nc\", combine=\"nested\", concat_dim=\"Time\").xwrf.postprocess()\nds_xwrf_2 = xr.open_mfdataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id[1]:04d}/raw_model/wrfout_d01_*.nc\", combine=\"nested\", concat_dim=\"Time\").xwrf.postprocess()\nds_xwrf_3 = xr.open_mfdataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id[2]:04d}/raw_model/wrfout_d01_*.nc\", combine=\"nested\", concat_dim=\"Time\").xwrf.postprocess()\nds_xwrf_3[\"Time\"] = ds_xwrf_3[\"XTIME\"]\nds_xwrf_2[\"Time\"] = ds_xwrf_2[\"XTIME\"]\nds_xwrf_1[\"Time\"] = ds_xwrf_1[\"XTIME\"]","key":"OwtEkc6atQ"},{"type":"output","id":"3NysqVNFzAOsx43v9Jzt4","data":[],"key":"BkQYSRPxFP"}],"key":"EwGWZqUcHp"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Advection Input to LES simulations with different forcings scale and corresponding LES output thermodynamic and Cloud time-height profiles","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"La48LYFNsx"}],"identifier":"advection-input-to-les-simulations-with-different-forcings-scale-and-corresponding-les-output-thermodynamic-and-cloud-time-height-profiles","label":"Advection Input to LES simulations with different forcings scale and corresponding LES output thermodynamic and Cloud time-height profiles","html_id":"advection-input-to-les-simulations-with-different-forcings-scale-and-corresponding-les-output-thermodynamic-and-cloud-time-height-profiles","implicit":true,"key":"PN17HM7Kto"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Humidity and Heat coming into the LES domain due to large-scale forcings is dinstinctly different for increasing forcing scales. These also correspond to very different intensities in cloud water content and other cloud structure properties.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"wvKOIaIZFc"}],"key":"NWaz2DwBcP"}],"key":"pevp1wfVmp"},{"type":"block","kind":"notebook-code","data":{"scrolled":true},"children":[{"type":"code","lang":"python","executable":true,"value":"import numpy as np\nimport matplotlib.ticker as tkr\n\npl.rcParams['xtick.labelsize'] = 16\npl.rcParams['ytick.labelsize'] = 16\npl.rcParams['axes.labelsize'] = 16\npl.rcParams['axes.titlesize'] = 16\npl.rcParams['legend.fontsize'] = 16\n\ndef plot_contour(var_name,label_name,min_level,max_level):\n    fig,ax = pl.subplots(1,3,figsize=(27,5))\n    pl.subplot(131)\n    ds_stat_1[var_name].plot.contourf(x='Time',y='height',levels=np.linspace(min_level,max_level,10),add_colorbar=False,cmap='coolwarm')\n    pl.ylim([0,5000])\n    pl.title(label_name[0])\n    pl.subplot(132)\n    ds_stat_2[var_name].plot.contourf(x='Time',y='height',levels=np.linspace(min_level,max_level,10),add_colorbar=False,cmap='coolwarm')\n    pl.title(label_name[1])\n    pl.ylabel('')\n    pl.ylim([0,5000])\n    pl.subplot(133)\n    p1=ds_stat_3[var_name].plot.contourf(x='Time',y='height',levels=np.linspace(min_level,max_level,10),add_colorbar=False,cmap='coolwarm')\n    pl.ylabel('')\n    pl.ylim([0,5000])\n    fig.subplots_adjust(right=0.8)\n    cbar_ax = fig.add_axes([0.85, 0.15, 0.05, 0.7])\n    cb2 = fig.colorbar(p1,format=tkr.FormatStrFormatter('%.3g'),cax=cbar_ax)\n    pl.title(label_name[2])\n    \nplot_contour('CSP_THDT_LSHOR',['','TH Advection Horizontal',''],-1e-4,1e-4)\nplot_contour('CSP_TH',['','TH - LES',''],280,310)\nplot_contour('CSP_QVDT_LSHOR',['','QV Advection Horizontal',''],0,2e-7)\nplot_contour('CSP_QV',['','QV - LES',''],0,0.011)\nplot_contour('CSP_QL',['','QL',''],0,5e-5)\n\npl.figure(figsize=(7,5))\nds_stat_1['CST_PRECT'].plot.line(label='75 km')\nds_stat_2['CST_PRECT'].plot.line(label='150 km')\nds_stat_2['CST_PRECT'].plot.line(label='300 km')","key":"CsVTA2e0JG"},{"type":"output","id":"SMQ6HwdJaCjeBORNKNlC8","data":[],"key":"XQJaRs8ls4"}],"key":"uTBVKFG7mh"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Which of the forcing scales produces clouds close to what was observed from satellie images (GOES)?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YBShPzKFtu"}],"identifier":"which-of-the-forcing-scales-produces-clouds-close-to-what-was-observed-from-satellie-images-goes","label":"Which of the forcing scales produces clouds close to what was observed from satellie images (GOES)?","html_id":"which-of-the-forcing-scales-produces-clouds-close-to-what-was-observed-from-satellie-images-goes","implicit":true,"key":"Z6VWQcpbVU"}],"key":"YlMNcHBHu0"},{"type":"block","kind":"notebook-code","data":{"scrolled":true},"children":[{"type":"code","lang":"python","executable":true,"value":"sim_id=6\nds_cogs_1 = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id:04d}/obs_model/sgplassocogsdiagobsmod{sim_id}C1.m1.{case_date:%Y%m%d}.120000.nc\")\nsim_id=7\nds_cogs_2 = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id:04d}/obs_model/sgplassocogsdiagobsmod{sim_id}C1.m1.{case_date:%Y%m%d}.120000.nc\")\nsim_id=8\nds_cogs_3 = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id:04d}/obs_model/sgplassocogsdiagobsmod{sim_id}C1.m1.{case_date:%Y%m%d}.120000.nc\")\n\nfig, ax = plt.subplots(ncols=1,figsize=(7,5))\nds_cogs_1[\"low_cloud_fraction_cogs\"].isel(source_type=0).plot(ax=ax, marker=\"o\", label=\"COGS\",color='k')\nds_cogs_1[\"low_cloud_fraction_cogs\"].isel(source_type=1).plot(ax=ax, marker=\"o\", label=\"Sim6\", color='b')\nds_cogs_2[\"low_cloud_fraction_cogs\"].isel(source_type=1).plot(ax=ax, marker=\"o\", label=\"Sim7\", color= 'r')\nds_cogs_3[\"low_cloud_fraction_cogs\"].isel(source_type=1).plot(ax=ax, marker=\"o\", label=\"Sim8\", color = 'g')\n# If you plan to share with frieds, do a little clean-up beyond the default labelling from xarray...\nax.legend()\nax.set_title(\"COGS vs. WRF Cloud Fraction\")\nax.set_xlabel(\"Time (UTC)\")\nax.set_ylabel(\"Cloud Fraction\")\nplt.show()\n\nds_may_1=xr.open_dataset('/data/project/ARM_Summer_School_2024_Data/lasso_tutorial/ShCu/untar/20190506/sim0006/obs_model/sgplassocogsdiagobsmod6C1.m1.20190506.120000.nc',decode_times=True)\nds_may_2=xr.open_dataset('/data/project/ARM_Summer_School_2024_Data/lasso_tutorial/ShCu/untar/20190506/sim0007/obs_model/sgplassocogsdiagobsmod7C1.m1.20190506.120000.nc',decode_times=True)\nds_may_3=xr.open_dataset('/data/project/ARM_Summer_School_2024_Data/lasso_tutorial/ShCu/untar/20190506/sim0008/obs_model/sgplassocogsdiagobsmod8C1.m1.20190506.120000.nc',decode_times=True)\n\n\nfig, ax = plt.subplots(ncols=1,figsize=(7,5))\nds_may_1[\"low_cloud_fraction_cogs\"].isel(source_type=0).plot(ax=ax, marker=\"o\", label=\"COGS\",color='k')\nds_may_1[\"low_cloud_fraction_cogs\"].isel(source_type=1).plot(ax=ax, marker=\"o\", label=\"Sim6\", color='b')\nds_may_2[\"low_cloud_fraction_cogs\"].isel(source_type=1).plot(ax=ax, marker=\"o\", label=\"Sim7\", color= 'r')\nds_may_3[\"low_cloud_fraction_cogs\"].isel(source_type=1).plot(ax=ax, marker=\"o\", label=\"Sim8\", color = 'g')\n# If you plan to share with frieds, do a little clean-up beyond the default labelling from xarray...\nax.legend()\nax.set_title(\"COGS vs. WRF Cloud Fraction\")\nax.set_xlabel(\"Time (UTC)\")\nax.set_ylabel(\"Cloud Fraction\")\nplt.show()","key":"zjjiR5P8eG"},{"type":"output","id":"odUnG1cXl5d5vMD4pKVPd","data":[],"key":"KC06RiIEIo"}],"key":"RwtPf2IwG7"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Are these differences we notice in Cloud structure statistics reprsentative of what’s going on at the 3-d level?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"z12DaRLd6Y"}],"identifier":"are-these-differences-we-notice-in-cloud-structure-statistics-reprsentative-of-whats-going-on-at-the-3-d-level","label":"Are these differences we notice in Cloud structure statistics reprsentative of what’s going on at the 3-d level?","html_id":"are-these-differences-we-notice-in-cloud-structure-statistics-reprsentative-of-whats-going-on-at-the-3-d-level","implicit":true,"key":"w8ar3xvakS"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"To check this we track each individual cloud cells (cluster of all adjacent cloudy cells) defined by x,y dependent cloud water path (ql_path) > 0.005","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IF75KgaOIM"}],"key":"kRXdNaK5lM"}],"key":"M4KXQmWli2"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#### Field Plots #####\nimport os\nimport numpy as np\nimport matplotlib.pyplot as pl\nfrom matplotlib import cm\nimport math\nfrom scipy.stats import norm\nimport xarray as xr\nimport netCDF4 as nc\nimport sys\n\nsys.setrecursionlimit(1000000)\n\n##########################################################################################\nclass cell:\n    def __init__(self, id):\n        self.id = id\n        self.value = [[],[]]\n        self.location = [[],[]]\n        self.nelements = 0\n        self.nelements_local = 0\n\n    def add_elements(self, i, j, var_values):\n        self.location[0].append(i)\n        self.location[1].append(j)\n        self.value[0].append(var_values)\n        self.nelements = self.nelements + 1\n        self.nelements_local = self.nelements_local + 1\n    def __del__(self):\n        return\n##########################################################################################\ndef find_boolean(variable, threshold_criteria): #variable is f(i, j, t): --> outputs boolean -1 (unsatisfied) 0 (satisfied) \n    boolean = np.zeros(( len(variable[:,0]), len(variable[0,:])))\n    boolean = -1\n    boolean = np.where(variable[:,:]>threshold_criteria,0,-1)\n    return boolean;\n########################################################################################\ndef identify_elements_in_cell(i,j,new_cell):  #input the ijk at which boolean is satisfied along with boolean and new cell created \n\n    global booli;\n    new_cell.add_elements(i,j,cell_variable[i,j])\n    booli[i,j] = -1\n\n    ii=i-1; jj=j; #look west\n    if ii<0:\n       ii = nx-1\n    if (booli[ii,jj] == 0):\n        identify_elements_in_cell(ii,jj,new_cell)  \n\n    ii=i+1; jj=j;  #look east\n    if ii>nx-1:\n       ii = 0\n    if (booli[ii,jj] == 0):\n        identify_elements_in_cell(ii,jj,new_cell)  \n\n    ii=i; jj=j+1;  #look north\n    if jj>ny-1:\n        jj = 0\n    if (booli[ii,jj] == 0):\n        identify_elements_in_cell(ii,jj,new_cell)  \n\n    ii=i; jj=j-1;  #look south\n    if jj<0:\n       jj = ny-1\n    if (booli[ii,jj] == 0):\n        identify_elements_in_cell(ii,jj,new_cell) \n#################################################################################################\ndef create_new_cell(variable,bool):                                # input the boolean and the variable, output is the cells tracked (i,j,t) based on boolean \n    cell_number = 0;\n    global booli,cell_variable,nx,ny;\n    nx = len(variable[:,0])\n    ny = len(variable[0,:])\n    booli=bool;cell_variable = variable;\n    variable_cells = []\n    for j in range(0,ny):\n        for i in range(0,nx):\n            if booli[i,j]==0: \n                new_cell=cell(cell_number) \n                identify_elements_in_cell(i,j,new_cell)\n                if new_cell.nelements>=nminelems:\n                    variable_cells.append(new_cell)\n                    variable_cells[cell_number].id = cell_number\n                    cell_number = cell_number + 1\n                else:\n                    del new_cell;\n    return variable_cells, cell_number;\n#################################################################################################\ndef run_tracking(tracked_variable,param_threshold):\n    global nx,ny;\n    nx = len(tracked_variable[:,0]); ny = len(tracked_variable[0,:]); \n    bool = find_boolean(tracked_variable,param_threshold)\n    [cells,cell_number] = create_new_cell(tracked_variable,bool);\n    return cells,cell_number;\n####################################################################################################\ndef find_cell_centers(cells,ncells):\n    centers=np.zeros((ncells,2))\n    max_cloudsize=0;\n    for i in range(0,ncells):\n        centers[i,0]=np.mean(cells[i].location[0])\n        centers[i,1]=np.mean(cells[i].location[1])\n        if cells[i].nelements>max_cloudsize:\n            max_cloudsize=cells[i].nelements\n    return centers,max_cloudsize;\n####################################################################################################\ndef find_nearest_neighbor(centers,nx,ny):\n    distance=np.zeros(len(centers[:,0]))\n    nn_distance=np.zeros(len(centers[:,0]))\n    for i in range(len(centers[:,0])):\n        for j in range(len(centers[:,0])):\n            if i==j:\n                distance[j]=100;\n            else:\n                xdist=min(abs(centers[i,0]+nx-centers[j,0]),abs(centers[i,0]-nx-centers[j,0]),abs(centers[i,0]-centers[j,0]))\n                ydist=min(abs(centers[i,1]+ny-centers[j,1]),abs(centers[i,1]-ny-centers[j,1]),abs(centers[i,1]-centers[j,1]))\n                distance[j]=math.sqrt(xdist**2+ydist**2)\n        nn_distance[i]=min(distance)\n    return nn_distance;\n####################################################################################################\ndef retrieve_variable(variable_name,netcdf_path): #open corresponding netcdf file and read data\n    all_data=xr.open_dataset(netcdf_path,decode_times=False)\n    var=all_data[variable_name].values\n    variable=var\n    x=all_data['x'].values\n    y=all_data['y'].values\n    t=all_data['Time'].values\n    return variable, x, y, t;    \n##########################################################################################\n#[w_cross,x,y,t]=retrieve_variable(variable_name='w',netcdf_path='/fs/ess/PFS0220/eurec4a/case_1060lagtraj_feb2_withw/w_cross.nc')\ndef get_iorg(xr_data,variable_name,param_threshold,start_ind,slice_len):\n    variable=xr_data[variable_name].values\n    i_org=np.zeros(xr_data.Time.size)\n    Max_Clouds=np.zeros(xr_data.Time.size)\n    for i in range(start_ind,xr_data.Time.size,slice_len):\n        if i%60==0:\n            print(i)\n        [clouds,ncells]=run_tracking(tracked_variable=variable[i,:,:],param_threshold=param_threshold)\n        if ncells<2:\n            i_org[i]=0;\n            Max_Clouds[i]=0;\n        else:\n            [centers,Max_Clouds[i]]=find_cell_centers(clouds,ncells)\n            nn_distance=find_nearest_neighbor(centers,nx,ny)\n            centers=centers.astype(int)\n            nn_sorted = np.sort(nn_distance);nn_sorted=nn_sorted/max(nn_sorted)\n            p = 1. * np.arange(len(nn_distance)) / (len(nn_distance) - 1)\n            p_ran=1-np.exp(-1*(math.pi)*nn_sorted*nn_sorted)\n            i_org[i]=np.trapz(p,x=p_ran)\n    xr_data['i_org']=xr.DataArray(i_org,dims=['Time'])\n    xr_data['Max_Clouds']=xr.DataArray(Max_Clouds,dims=['Time'])\n    return xr_data;\n#########################################################################################\n\n\nnminelems=10\nslice_len=1;\n\nds_xwrf_1=get_iorg(ds_xwrf_1,'qc_path',0.005,start_ind=0,slice_len=slice_len)\nds_xwrf_2=get_iorg(ds_xwrf_2,'qc_path',0.005,start_ind=0,slice_len=slice_len)\nds_xwrf_3=get_iorg(ds_xwrf_3,'qc_path',0.005,start_ind=0,slice_len=slice_len)","key":"BxY9kzoBm8"},{"type":"output","id":"rrZTL6lWj99RK6EV3n6RK","data":[],"key":"CfB6XhKmg7"}],"key":"FjseraoLHb"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Organization Index (Randomness (=0) or Organization (=1) of tracked individual cloud cells) and Size of Cloud Cell with maximum area","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VG9swX2ikY"}],"identifier":"organization-index-randomness-0-or-organization-1-of-tracked-individual-cloud-cells-and-size-of-cloud-cell-with-maximum-area","label":"Organization Index (Randomness (=0) or Organization (=1) of tracked individual cloud cells) and Size of Cloud Cell with maximum area","html_id":"organization-index-randomness-0-or-organization-1-of-tracked-individual-cloud-cells-and-size-of-cloud-cell-with-maximum-area","implicit":true,"key":"vWSimnXUaA"}],"key":"Pl3JZZeq2n"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"pl.figure(figsize=(7,5))\n(0.1*ds_xwrf_1['Max_Clouds']**(1/2)).plot.line(label='75km')\n(0.1*ds_xwrf_2['Max_Clouds']**(1/2)).plot.line(label='150km')\n(0.1*ds_xwrf_3['Max_Clouds']**(1/2)).plot.line(label='300km')\npl.ylabel('Cloud Size (km)')\npl.title('Size of the Largest Cloud Cell')\npl.legend()\n\npl.figure(figsize=(7,5))\nds_xwrf_1.i_org.rolling(Time=6, center=True).mean().dropna(\"Time\").plot.line(label='75km')\nds_xwrf_2.i_org.rolling(Time=6, center=True).mean().dropna(\"Time\").plot.line(label='150km')\nds_xwrf_3.i_org.rolling(Time=6, center=True).mean().dropna(\"Time\").plot.line(label='300km')\npl.ylabel(r'Organization Index ($I_{org}$)')\npl.title('Extent of Cloud Organization')\npl.legend()\n\n\n\n\n","key":"f5IXv3GHw1"},{"type":"output","id":"G3S_n9d7SMTWBJxLIGlLk","data":[],"key":"rfLc7Wc6VG"}],"key":"HtxzTthfq4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds_stat_1.CSP_Z.isel(bottom_top=75).values","key":"bfmaLp9JTD"},{"type":"output","id":"aMIsseqjTv5wDxBhdD8q5","data":[],"key":"fW2zuCO8cI"}],"key":"ZesmZ4sDmH"}],"key":"lop1HeyrH8"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"The impact of large-scale forcing scales on clouds.","url":"/notebooks/forcingltke","group":"LASSO Simulation April 4, 2019 - Forcings TKE"}}},"domain":"http://localhost:3000"}