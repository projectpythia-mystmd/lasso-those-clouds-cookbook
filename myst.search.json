{"version":"1","records":[{"hierarchy":{"lvl1":"Large Scale Forcing Impact on Shallow Cumulus Fields over SGP"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"Large Scale Forcing Impact on Shallow Cumulus Fields over SGP"},"content":"\n\n","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"Large Scale Forcing Impact on Shallow Cumulus Fields over SGP","lvl2":"Group Members"},"type":"lvl2","url":"/#group-members","position":2},{"hierarchy":{"lvl1":"Large Scale Forcing Impact on Shallow Cumulus Fields over SGP","lvl2":"Group Members"},"content":"Xena Mansoura, Kyoungho Ryu, Tessa Rosenberger, Theresa Lincheck, Girish Nigamanth Raghunathan","type":"content","url":"/#group-members","position":3},{"hierarchy":{"lvl1":"Large Scale Forcing Impact on Shallow Cumulus Fields over SGP","lvl2":"Science Question(s)"},"type":"lvl2","url":"/#science-question-s","position":4},{"hierarchy":{"lvl1":"Large Scale Forcing Impact on Shallow Cumulus Fields over SGP","lvl2":"Science Question(s)"},"content":"What does the organization and structure of the shallow cumulus field look like in LASSO simulations on April 4, 2019?\n\nHow does this organization and structure of shallow cu differ from observations on April 4th, 2019?\n\nHow does near surface moisture influence evolution of shallow cumulus?","type":"content","url":"/#science-question-s","position":5},{"hierarchy":{"lvl1":"Large Scale Forcing Impact on Shallow Cumulus Fields over SGP","lvl2":"Project Scope (what does success look like)?"},"type":"lvl2","url":"/#project-scope-what-does-success-look-like","position":6},{"hierarchy":{"lvl1":"Large Scale Forcing Impact on Shallow Cumulus Fields over SGP","lvl2":"Project Scope (what does success look like)?"},"content":"A successful project will identify trends between cloud organization and evolution of shallow cumulus clouds over the Southern Great Plains.","type":"content","url":"/#project-scope-what-does-success-look-like","position":7},{"hierarchy":{"lvl1":"Large Scale Forcing Impact on Shallow Cumulus Fields over SGP","lvl2":"Hypothesis (or Hypotheses)"},"type":"lvl2","url":"/#hypothesis-or-hypotheses","position":8},{"hierarchy":{"lvl1":"Large Scale Forcing Impact on Shallow Cumulus Fields over SGP","lvl2":"Hypothesis (or Hypotheses)"},"content":"The scale of large scale forcing that will yield results closest to observations, depends on the date - there is no “one-size fits all” scale size.\n\nIncreased surface moisture will cause earlier timing of shallow cumulus creation and deeper clouds (looking at observations on LASSO case dates)","type":"content","url":"/#hypothesis-or-hypotheses","position":9},{"hierarchy":{"lvl1":"Large Scale Forcing Impact on Shallow Cumulus Fields over SGP","lvl2":"Datasets"},"type":"lvl2","url":"/#datasets","position":10},{"hierarchy":{"lvl1":"Large Scale Forcing Impact on Shallow Cumulus Fields over SGP","lvl2":"Datasets"},"content":"LASSO SGP April 4th 2019\nARM observational data sets","type":"content","url":"/#datasets","position":11},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019"},"type":"lvl1","url":"/notebooks/calc-cloud-base-and-top","position":0},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019"},"content":"Looking at LASSO data for April 4, 2019 to see meterological data and calculate cloud base and cloud top.\n\n\n\n","type":"content","url":"/notebooks/calc-cloud-base-and-top","position":1},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019","lvl3":"Imports"},"type":"lvl3","url":"/notebooks/calc-cloud-base-and-top#imports","position":2},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019","lvl3":"Imports"},"content":"\n\nfrom datetime import datetime\nimport numpy as np\nimport xarray as xr\nimport fsspec\nimport xwrf\n\nimport matplotlib.pyplot as plt\n\n","type":"content","url":"/notebooks/calc-cloud-base-and-top#imports","position":3},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019","lvl3":"Bring in the data"},"type":"lvl3","url":"/notebooks/calc-cloud-base-and-top#bring-in-the-data","position":4},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019","lvl3":"Bring in the data"},"content":"\n\nHere is the raw model output from LASSO.\n\n# Set the URL and path for the cloud\nURL = 'https://js2.jetstream-cloud.org:8001/'\npath = f'pythia/lasso-sgp'\n\n# Configure the s3-like storage endpoint on jetstream\nfs = fsspec.filesystem(\"s3\", anon=True, client_kwargs=dict(endpoint_url=URL))\n\n# Set the analysis date and simulation number\ncase_date = datetime(2019, 4, 4)\nsim_id = 7\n\n# Read the wrfstat files\nwrfstat_pattern = f's3://{path}/sim000{sim_id}/raw_model/wrfstat*'\nwrfstat_files = sorted(fs.glob(wrfstat_pattern))\n\n# Remotely read these into a list\nwrfstat_file_list = [fs.open(file) for file in wrfstat_files]\nwrfstat_file_list\n\n","type":"content","url":"/notebooks/calc-cloud-base-and-top#bring-in-the-data","position":5},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019","lvl4":"Load into an xarray.Dataset","lvl3":"Bring in the data"},"type":"lvl4","url":"/notebooks/calc-cloud-base-and-top#load-into-an-xarray-dataset","position":6},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019","lvl4":"Load into an xarray.Dataset","lvl3":"Bring in the data"},"content":"\n\nds_stat = xr.open_mfdataset(wrfstat_file_list, engine='h5netcdf')\n\n# Rename time - in this case, we are not using xwrf to clean the dataset\nds_stat[\"Time\"] = ds_stat[\"XTIME\"]\nds_stat\n\n","type":"content","url":"/notebooks/calc-cloud-base-and-top#load-into-an-xarray-dataset","position":7},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019","lvl3":"Find the indices of the boundary layer depth - in case we happen to care about that later"},"type":"lvl3","url":"/notebooks/calc-cloud-base-and-top#find-the-indices-of-the-boundary-layer-depth-in-case-we-happen-to-care-about-that-later","position":8},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019","lvl3":"Find the indices of the boundary layer depth - in case we happen to care about that later"},"content":"\n\nds_stat[\"bottom_top\"] = ds_stat.bottom_top\nds_stat\nki = ds_stat['CSP_THL'].idxmin(dim='bottom_top')\nki.load()\n\n","type":"content","url":"/notebooks/calc-cloud-base-and-top#find-the-indices-of-the-boundary-layer-depth-in-case-we-happen-to-care-about-that-later","position":9},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019","lvl3":"Let’s look at some meteorological info for this date"},"type":"lvl3","url":"/notebooks/calc-cloud-base-and-top#lets-look-at-some-meteorological-info-for-this-date","position":10},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019","lvl3":"Let’s look at some meteorological info for this date"},"content":"\n\nplot_ql = ds_stat['CSP_QL'].assign_coords(height = (ds_stat[\"CSP_Z\"]))\nplot_ql.isel(Time=slice(6,None)).plot(x = 'Time',y = 'height', ylim=[0,7000])\n\nplot_lwc = ds_stat['CSP_LWC'].assign_coords(height = (ds_stat[\"CSP_Z\"]))\nplot_lwc.isel(Time=slice(6,None)).plot(x = 'Time',y = 'height', ylim=[0,7000])\n\nplot_thl = ds_stat['CSP_TH'].assign_coords(height = (ds_stat[\"CSP_Z\"]))\nplot_thl.isel(Time=slice(6,None)).plot(x = 'Time',y = 'height', ylim=[0,7000],vmin=298,vmax=320)\n\n","type":"content","url":"/notebooks/calc-cloud-base-and-top#lets-look-at-some-meteorological-info-for-this-date","position":11},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019","lvl2":"Fix some height things so that we can plot..."},"type":"lvl2","url":"/notebooks/calc-cloud-base-and-top#fix-some-height-things-so-that-we-can-plot","position":12},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019","lvl2":"Fix some height things so that we can plot..."},"content":"The z values are time dependent, so we need to deal with the height values by assuming that the first time step is close enough\n\nWe also need to make bottom_top a coordinate so that we aren’t yelled at by errors\n\nds_stat[\"bottom_top\"] = ds_stat.bottom_top\n\nds_stat['bottom_top'] = ds_stat['CSP_Z'].isel(Time = 1).values\n\nds_stat['bottom_top'].values # make sure that these are heights and not indicies\n\n","type":"content","url":"/notebooks/calc-cloud-base-and-top#fix-some-height-things-so-that-we-can-plot","position":13},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019","lvl2":"Calculate cloud base and top from the liquid water conent and the liquid water mixing ratio"},"type":"lvl2","url":"/notebooks/calc-cloud-base-and-top#calculate-cloud-base-and-top-from-the-liquid-water-conent-and-the-liquid-water-mixing-ratio","position":14},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019","lvl2":"Calculate cloud base and top from the liquid water conent and the liquid water mixing ratio"},"content":"\n\nds_stat['cb_lwc'] = (ds_stat['CSP_LWC']>0).idxmax(dim = 'bottom_top')\nds_stat['cb_lwc'] = ds_stat['cb_lwc'].where(ds_stat['cb_lwc']>ds_stat['bottom_top'][0])\nprint(ds_stat['cb_lwc'])\n\nds_stat['ct_lwc'] = ((ds_stat['CSP_LWC'].isel(bottom_top = slice(None, None, -1)))>0).idxmax(dim='bottom_top')\nds_stat['ct_lwc'] = ds_stat['ct_lwc'].where(ds_stat['ct_lwc']<ds_stat['bottom_top'][-1])\nprint(ds_stat['ct_lwc'])\n\nds_stat['cb_lwc'].plot(label='base',ylim = (0,7000),xlim = (ds_stat['CSP_Z'].Time[6],ds_stat['CSP_Z'].Time[-1]))\nds_stat['ct_lwc'].plot(label='top',ylim = (0,7000),xlim = (ds_stat['CSP_Z'].Time[6],ds_stat['CSP_Z'].Time[-1]))\nplt.legend()\nplt.ylabel('Height (m)')\nplt.xlabel('Time (UTC)')\nplt.show()\n\nds_stat['cb_ql'] = (ds_stat['CSP_LWC']>0).idxmax(dim = 'bottom_top')\nds_stat['cb_ql'] = ds_stat['cb_ql'].where(ds_stat['cb_ql']>ds_stat['bottom_top'][0])\nprint(ds_stat['cb_ql'].load())\n\nds_stat['ct_ql'] = ((ds_stat['CSP_LWC'].isel(bottom_top = slice(None, None, -1)))>0).idxmax(dim='bottom_top')\nds_stat['ct_ql'] = ds_stat['ct_ql'].where(ds_stat['ct_ql']<ds_stat['bottom_top'][-1])\nprint(ds_stat['ct_ql'].load())\n\nds_stat['cb_ql'].plot(label='base',ylim = (0,7000),xlim = (ds_stat['CSP_Z'].Time[6],ds_stat['CSP_Z'].Time[-1]))\nds_stat['ct_ql'].plot(label='top',ylim = (0,7000),xlim = (ds_stat['CSP_Z'].Time[6],ds_stat['CSP_Z'].Time[-1]))\nplt.legend()\nplt.ylabel('Height (m)')\nplt.xlabel('Time (UTC)')\nplt.show()\n\n","type":"content","url":"/notebooks/calc-cloud-base-and-top#calculate-cloud-base-and-top-from-the-liquid-water-conent-and-the-liquid-water-mixing-ratio","position":15},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019","lvl3":"Conclusions","lvl2":"Calculate cloud base and top from the liquid water conent and the liquid water mixing ratio"},"type":"lvl3","url":"/notebooks/calc-cloud-base-and-top#conclusions","position":16},{"hierarchy":{"lvl1":"Clouds over SGP for April 4, 2019","lvl3":"Conclusions","lvl2":"Calculate cloud base and top from the liquid water conent and the liquid water mixing ratio"},"content":"We notice how similar the cloud base/top are at their beginning and end times! This framework enables a streamlined method of analyzing clouds within the simulation data, including derived quantities such as cloud base/height.","type":"content","url":"/notebooks/calc-cloud-base-and-top#conclusions","position":17},{"hierarchy":{"lvl1":"The impact of large-scale forcing scales on clouds."},"type":"lvl1","url":"/notebooks/forcingltke","position":0},{"hierarchy":{"lvl1":"The impact of large-scale forcing scales on clouds."},"content":"# Import packages\n\nfrom datetime import datetime\nimport numpy as np\nimport xarray as xr\nimport xwrf\n\nimport matplotlib.pyplot as plt\n\n\n# The Large Scale Forcing Scale in Simulation 6 is 75 km\n# The Large Scale Forcing Scale in Simulation 7 is 150 km\n# The Large Scale Forcing Scale in Simulation 8 is 300 km\n\n# Load Data\n# To recap, wrfstat is 10 minutes-average values, wrfout is a snapshot at a given time.\n\npath_shcu_root = \"/data/project/ARM_Summer_School_2024_Data/lasso_tutorial/ShCu/untar\"  # on Jupyter\n\ncase_date = datetime(2019, 4, 4)\n\nsim_id2 = 6\nsim_id3 = 7\nsim_id4 = 8\n\nds_stat6 =  xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id2:04d}/raw_model/wrfstat_d01_{case_date:%Y-%m-%d_12:00:00}.nc\")\nds_stat7 =  xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id3:04d}/raw_model/wrfstat_d01_{case_date:%Y-%m-%d_12:00:00}.nc\")\nds_stat8 =  xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id4:04d}/raw_model/wrfstat_d01_{case_date:%Y-%m-%d_12:00:00}.nc\")\n\nds_stat6 = ds_stat6.xwrf.postprocess()\nds_stat7 = ds_stat7.xwrf.postprocess()\nds_stat8 = ds_stat8.xwrf.postprocess()\n\nds_stat7\n\n","type":"content","url":"/notebooks/forcingltke","position":1},{"hierarchy":{"lvl1":"The impact of large-scale forcing scales on clouds.","lvl2":"Compare cloud core fraction with the observation (COG)"},"type":"lvl2","url":"/notebooks/forcingltke#compare-cloud-core-fraction-with-the-observation-cog","position":2},{"hierarchy":{"lvl1":"The impact of large-scale forcing scales on clouds.","lvl2":"Compare cloud core fraction with the observation (COG)"},"content":"\n\n\nsim_id2 = 6\nds_cogs6 = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id2:04d}/obs_model/sgplassocogsdiagobsmod{sim_id2}C1.m1.{case_date:%Y%m%d}.120000.nc\")\n\nsim_id3 = 7\nds_cogs7 = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id3:04d}/obs_model/sgplassocogsdiagobsmod{sim_id3}C1.m1.{case_date:%Y%m%d}.120000.nc\")\n\nsim_id4 = 8\nds_cogs8 = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id4:04d}/obs_model/sgplassocogsdiagobsmod{sim_id4}C1.m1.{case_date:%Y%m%d}.120000.nc\")\n\n\n# Plot cloud core fractions\n\nfig, ax = plt.subplots(ncols=1)\n\n# source_type = 1 is simulations\n# source_type = 0 is observations\n\nds_cogs6[\"low_cloud_fraction_cogs\"].isel(source_type=1).plot(ax=ax, marker=\"1\", label=\"Sim6-75\")\nds_cogs7[\"low_cloud_fraction_cogs\"].isel(source_type=1).plot(ax=ax, marker=\"1\", label=\"Sim7-150\")\nds_cogs8[\"low_cloud_fraction_cogs\"].isel(source_type=1).plot(ax=ax, marker=\"1\", label=\"Sim8-300\")\n# Observations\nds_cogs7[\"low_cloud_fraction_cogs\"].isel(source_type=0).plot(ax=ax, marker=\"1\", label=\"COG-OBS\")\n\nax.legend()\nax.set_title(\"Comparisons of Simulations for WRF Cloud Fraction\")\nax.set_xlabel(\"Time (UTC)\")\nax.set_ylabel(\"Cloud Fraction\")\n\nplt.show()\n\n\n","type":"content","url":"/notebooks/forcingltke#compare-cloud-core-fraction-with-the-observation-cog","position":3},{"hierarchy":{"lvl1":"The impact of large-scale forcing scales on clouds.","lvl2":"Cloud Core Fraction Profiles"},"type":"lvl2","url":"/notebooks/forcingltke#cloud-core-fraction-profiles","position":4},{"hierarchy":{"lvl1":"The impact of large-scale forcing scales on clouds.","lvl2":"Cloud Core Fraction Profiles"},"content":"\n\n# Fraction of cloud core grid points\n\nfig, ax = plt.subplots(1, 3, figsize=(20, 5))\n\nds_stat6[\"CSP_A_CC\"].plot(ax=ax[0], y =\"z\") #one plot\nds_stat7[\"CSP_A_CC\"].plot(ax=ax[1], y = \"z\")\nds_stat8[\"CSP_A_CC\"].plot(ax=ax[2], y = \"z\")\n\nplt.show()\n\n# simulation 6, 7, and 8 from the left to the right.\n\n","type":"content","url":"/notebooks/forcingltke#cloud-core-fraction-profiles","position":5},{"hierarchy":{"lvl1":"The impact of large-scale forcing scales on clouds.","lvl3":"Based on the above figures, We can see that Simulation 6 produces more cloud core fractions, and Simulation 7 is the closest one to the observation. What we learned today.","lvl2":"Cloud Core Fraction Profiles"},"type":"lvl3","url":"/notebooks/forcingltke#based-on-the-above-figures-we-can-see-that-simulation-6-produces-more-cloud-core-fractions-and-simulation-7-is-the-closest-one-to-the-observation-what-we-learned-today","position":6},{"hierarchy":{"lvl1":"The impact of large-scale forcing scales on clouds.","lvl3":"Based on the above figures, We can see that Simulation 6 produces more cloud core fractions, and Simulation 7 is the closest one to the observation. What we learned today.","lvl2":"Cloud Core Fraction Profiles"},"content":"","type":"content","url":"/notebooks/forcingltke#based-on-the-above-figures-we-can-see-that-simulation-6-produces-more-cloud-core-fractions-and-simulation-7-is-the-closest-one-to-the-observation-what-we-learned-today","position":7},{"hierarchy":{"lvl1":"The impact of large-scale forcing scales on clouds.","lvl3":"Based on them, I assume the different large-scale forcing lengths impact turbulence and thus cloud core fraction.","lvl2":"Cloud Core Fraction Profiles"},"type":"lvl3","url":"/notebooks/forcingltke#based-on-them-i-assume-the-different-large-scale-forcing-lengths-impact-turbulence-and-thus-cloud-core-fraction","position":8},{"hierarchy":{"lvl1":"The impact of large-scale forcing scales on clouds.","lvl3":"Based on them, I assume the different large-scale forcing lengths impact turbulence and thus cloud core fraction.","lvl2":"Cloud Core Fraction Profiles"},"content":"","type":"content","url":"/notebooks/forcingltke#based-on-them-i-assume-the-different-large-scale-forcing-lengths-impact-turbulence-and-thus-cloud-core-fraction","position":9},{"hierarchy":{"lvl1":"The impact of large-scale forcing scales on clouds.","lvl3":"I know you all know this, but just to recap, TKE is the turbulent kinematic energy and thus it is the energy for turbulence from the surface to the atmospheric boundary layer. TKE = (U^2 + V^2 + W^2)/2","lvl2":"Cloud Core Fraction Profiles"},"type":"lvl3","url":"/notebooks/forcingltke#i-know-you-all-know-this-but-just-to-recap-tke-is-the-turbulent-kinematic-energy-and-thus-it-is-the-energy-for-turbulence-from-the-surface-to-the-atmospheric-boundary-layer-tke-u-2-v-2-w-2-2","position":10},{"hierarchy":{"lvl1":"The impact of large-scale forcing scales on clouds.","lvl3":"I know you all know this, but just to recap, TKE is the turbulent kinematic energy and thus it is the energy for turbulence from the surface to the atmospheric boundary layer. TKE = (U^2 + V^2 + W^2)/2","lvl2":"Cloud Core Fraction Profiles"},"content":"\n\n# Compare TKE with three simulations\nfig, ax = plt.subplots(ncols=1)\n\nds_stat6[\"CST_TKE\"].plot(ax=ax, marker=\"1\", label=\"Sim6-75\")\nds_stat7[\"CST_TKE\"].plot(ax=ax, marker=\"1\", label=\"Sim7-150\")\nds_stat8[\"CST_TKE\"].plot(ax=ax, marker=\"1\", label=\"Sim8-300\")\n\nax.legend()\nax.set_title(\"Comparisons of TKE\")\n\nplt.show()\n\n","type":"content","url":"/notebooks/forcingltke#i-know-you-all-know-this-but-just-to-recap-tke-is-the-turbulent-kinematic-energy-and-thus-it-is-the-energy-for-turbulence-from-the-surface-to-the-atmospheric-boundary-layer-tke-u-2-v-2-w-2-2","position":11},{"hierarchy":{"lvl1":"The impact of large-scale forcing scales on clouds.","lvl2":"We can see that simulation 6 has the biggest TKE value and it reaches its peak at the earliest time (around 18:00 UTC) among the three simulations."},"type":"lvl2","url":"/notebooks/forcingltke#we-can-see-that-simulation-6-has-the-biggest-tke-value-and-it-reaches-its-peak-at-the-earliest-time-around-18-00-utc-among-the-three-simulations","position":12},{"hierarchy":{"lvl1":"The impact of large-scale forcing scales on clouds.","lvl2":"We can see that simulation 6 has the biggest TKE value and it reaches its peak at the earliest time (around 18:00 UTC) among the three simulations."},"content":"\n\n\n# To further investigate the impact of large-scale forcing scales,\n# I looked at each component of TKE and specific humidity (water vapor mixing ratio) variance\n\n\nfig, ax = plt.subplots(4, 3, figsize=(20, 10))\n\nds_stat6[\"CSP_U2\"].isel(z= slice(0, 150)).plot(ax=ax[0,0], y =\"z\") #one plot\nds_stat7[\"CSP_U2\"].isel(z= slice(0, 150)).plot(ax=ax[0,1], y = \"z\")\nds_stat8[\"CSP_U2\"].isel(z= slice(0, 150)).plot(ax=ax[0,2], y = \"z\")\n\nds_stat6[\"CSP_V2\"].isel(z= slice(0, 150)).plot(ax=ax[1,0], y =\"z\") #one plot\nds_stat7[\"CSP_V2\"].isel(z= slice(0, 150)).plot(ax=ax[1,1], y = \"z\")\nds_stat8[\"CSP_V2\"].isel(z= slice(0, 150)).plot(ax=ax[1,2], y = \"z\")\n\nds_stat6[\"CSP_W2\"].isel(z_stag= slice(0, 150)).plot(ax=ax[2,0], y =\"z_stag\") #one plot\nds_stat7[\"CSP_W2\"].isel(z_stag= slice(0, 150)).plot(ax=ax[2,1], y = \"z_stag\")\nds_stat8[\"CSP_W2\"].isel(z_stag= slice(0, 150)).plot(ax=ax[2,2], y = \"z_stag\")\n\nds_stat6[\"CSP_QV2\"].isel(z= slice(0, 150)).plot(ax=ax[3,0], y =\"z\") #one plot\nds_stat7[\"CSP_QV2\"].isel(z= slice(0, 150)).plot(ax=ax[3,1], y = \"z\")\nds_stat8[\"CSP_QV2\"].isel(z= slice(0, 150)).plot(ax=ax[3,2], y = \"z\")\n\n\nplt.show()\n\n# U wind variance, V wind variance, W wind variance, the total water vapor mixing ratio from top to bottom.\n# Simulation 6, 7, and 8 from the left to the right.\n\n# If you find something from the below figure, please let me know!\n# lim\n# What I can see is the variances rapidly increase in Simulation 6. \n# I guess that is the atmospheric boundary layer (ABL) growth. \n# That is, the ABL grows at the fastest rate in the smallest Large Scale Forcing Scale. \n\n# However, the water vapor mixing ratio (the bottom row) is the lowest in Simulation 6. \n# Is it because the strong turbulence in Simulation 6 makes a well-mixed layer??\n# If you can interpret this, please let me know.\n\n\nfig = plt.figure(figsize=(20, 10))\n\n# Create a plot for temperature\nax = fig.add_subplot(4, 3, 1)\n\nds_stat6[\"CSP_U2\"].isel(z= slice(0, 150)).plot( y =\"z\") #one plot\n\n#ax.set_title('Temperature')\n#ax.set_xlim(110, 130)\n#ax.set_ylim(290, 315)\n\n# Create a plot for dewpoint\nax2 = fig.add_subplot(4, 3, 2)\nds_stat7[\"CSP_U2\"].isel(z= slice(0, 150)).plot( y = \"z\")\n\nax3 = fig.add_subplot(4, 3, 3)\nds_stat8[\"CSP_U2\"].isel(z= slice(0, 150)).plot( y = \"z\")\n\nax4 = fig.add_subplot(4, 3, 4)\nds_stat6[\"CSP_V2\"].isel(z= slice(0, 150)).plot( y =\"z\") #one plot\n\nax5 = fig.add_subplot(4, 3, 5)\nds_stat7[\"CSP_V2\"].isel(z= slice(0, 150)).plot( y = \"z\")\n\nax6 = fig.add_subplot(4, 3, 6)\nds_stat8[\"CSP_V2\"].isel(z= slice(0, 150)).plot( y = \"z\")\n\nax7 = fig.add_subplot(4, 3, 7)\nds_stat6[\"CSP_W2\"].isel(z_stag= slice(0, 150)).plot( y =\"z_stag\") #one plot\n\nax8 = fig.add_subplot(4, 3, 8)\nds_stat7[\"CSP_W2\"].isel(z_stag= slice(0, 150)).plot( y = \"z_stag\")\n\nax9 = fig.add_subplot(4, 3, 9)\nds_stat8[\"CSP_W2\"].isel(z_stag= slice(0, 150)).plot( y = \"z_stag\")\n\nax10 = fig.add_subplot(4, 3, 10)\nds_stat6[\"CSP_QV2\"].isel(z= slice(0, 150)).plot( y =\"z\") #one plot\n#ax10.set_ylim(0, 4)\n\nax11 = fig.add_subplot(4, 3, 11)\nds_stat7[\"CSP_QV2\"].isel(z= slice(0, 150)).plot( y = \"z\")\n#ax11.set_ylim(0, 4)\n\nax12 = fig.add_subplot(4, 3, 12)\nds_stat8[\"CSP_QV2\"].isel(z= slice(0, 150)).plot( y = \"z\")\n#ax12.set_ylim(0, 4)\n\n\n","type":"content","url":"/notebooks/forcingltke#we-can-see-that-simulation-6-has-the-biggest-tke-value-and-it-reaches-its-peak-at-the-earliest-time-around-18-00-utc-among-the-three-simulations","position":13},{"hierarchy":{"lvl1":"The impact of large-scale forcing scales on clouds.","lvl2":"Conclusion"},"type":"lvl2","url":"/notebooks/forcingltke#conclusion","position":14},{"hierarchy":{"lvl1":"The impact of large-scale forcing scales on clouds.","lvl2":"Conclusion"},"content":"The large-scale forcing scales impact cloud core fraction due to different TKEs.\nAs Girish suggests today (our assumption), the model should carefully choose the large-forcing length scale to represent the environment appropriately on a given day.","type":"content","url":"/notebooks/forcingltke#conclusion","position":15},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019"},"type":"lvl1","url":"/notebooks/lassoarmclouds","position":0},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019"},"content":"","type":"content","url":"/notebooks/lassoarmclouds","position":1},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl3":"Import"},"type":"lvl3","url":"/notebooks/lassoarmclouds#import","position":2},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl3":"Import"},"content":"\n\n# Lasso Simulation Data\n\n# import dask\nfrom datetime import datetime\nfrom distributed import Client\nimport numpy as np\nimport xarray as xr\nimport xwrf\nimport s3fs\nimport fsspec\nimport xarray as xr\nimport glob\n\nimport matplotlib.pyplot as plt\n\n","type":"content","url":"/notebooks/lassoarmclouds#import","position":3},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl3":"Spin up a Dask Cluster"},"type":"lvl3","url":"/notebooks/lassoarmclouds#spin-up-a-dask-cluster","position":4},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl3":"Spin up a Dask Cluster"},"content":"We will use Dask here to access the data in a parallel/distributed manner.\n\nclient = Client()\nclient\n\n","type":"content","url":"/notebooks/lassoarmclouds#spin-up-a-dask-cluster","position":5},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl3":"Access LASSO SGP Data from the NSF Jetstream Cloud"},"type":"lvl3","url":"/notebooks/lassoarmclouds#access-lasso-sgp-data-from-the-nsf-jetstream-cloud","position":6},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl3":"Access LASSO SGP Data from the NSF Jetstream Cloud"},"content":"A subset of the LASSO Shallow Cumulus Experiment over the Southern Great Plains site has been made available on a cloud bucket, hosted through Project Pythia. These datasets were originally accessed through the \n\nLASSO bundle browser, untarred, then uploaded to the cloud bucket. We focus exclusively on the April 4, 2019 case.\n\nData were obtained from the Atmospheric Radiation Measurement (ARM) Program sponsored by the U.S. Department of Energy, Office of Science, Office of Biological and Environmental Research, Climate and Environmental Sciences Division.\n\n","type":"content","url":"/notebooks/lassoarmclouds#access-lasso-sgp-data-from-the-nsf-jetstream-cloud","position":7},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl4":"Set the URL to access the data","lvl3":"Access LASSO SGP Data from the NSF Jetstream Cloud"},"type":"lvl4","url":"/notebooks/lassoarmclouds#set-the-url-to-access-the-data","position":8},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl4":"Set the URL to access the data","lvl3":"Access LASSO SGP Data from the NSF Jetstream Cloud"},"content":"The data are stored on a bucket, which is a web-accessible place where we can remotely stream the data, without downloading directly. The bucket is located on the NSF jetstream cloud, which we can see below. We then use fsspec to easily list the directrories and load in the data.\n\nBelow we set the url, then list (glob) the directories in the bucket.\n\n# Set the URL and path for the cloud\nURL = 'https://js2.jetstream-cloud.org:8001/'\npath = f'pythia/lasso-sgp'\n\n\nfs = fsspec.filesystem(\"s3\", anon=True, client_kwargs=dict(endpoint_url=URL))\n\nfs.glob(f\"{path}/*\")\n\nWe notice that there are 8 simulations, as well as observations in the bucket. We are going to start with the fourth simulation, setting a path to the actual output, which is under /raw_model/\n\ncase_date = datetime(2019, 4, 4)\nsim_id = 4\n\n# Read the wrfstat files\nwrfstat_pattern = f's3://{path}/sim000{sim_id}/raw_model/wrfstat*'\n\n# Read the wrfout files\nwrfout_pattern = f's3://{path}/sim000{sim_id}/raw_model/wrfout*'\n\nwrfstat_files = sorted(fs.glob(wrfstat_pattern))\nwrfout_files = sorted(fs.glob(wrfout_pattern))\n\nNow that we have lists of files, we setup a path to read into xarray since we need the bucket information as well.\n\nwrfstat_file_list = [fs.open(file) for file in wrfstat_files]\nwrfout_file_list = [fs.open(file) for file in wrfout_files]\n\n","type":"content","url":"/notebooks/lassoarmclouds#set-the-url-to-access-the-data","position":9},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl4":"Load Data Using Xarray and View Variables","lvl3":"Access LASSO SGP Data from the NSF Jetstream Cloud"},"type":"lvl4","url":"/notebooks/lassoarmclouds#load-data-using-xarray-and-view-variables","position":10},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl4":"Load Data Using Xarray and View Variables","lvl3":"Access LASSO SGP Data from the NSF Jetstream Cloud"},"content":"\n\nWe have a single WRF stat file, which we can load into xarray, then postprocess with xwrf.\n\nds_stat = xr.open_mfdataset(wrfstat_file_list, engine='h5netcdf').xwrf.postprocess()\nds_stat\n\n# Plotting wrfstat variables...\n\n# path_shcu_root = \"/gpfs/wolf2/arm/atm124/world-shared/arm-summer-school-2024/lasso_tutorial/ShCu/untar/\"  # on cumulus\npath_shcu_root = \"/data/project/ARM_Summer_School_2024_Data/lasso_tutorial/ShCu/untar\"  # on Jupyter\n\ncase_date = datetime(2019, 4, 4)\nsim_id = 4\n\nds_stat = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id:04d}/raw_model/wrfstat_d01_{case_date:%Y-%m-%d_12:00:00}.nc\")\nds_stat\n\n","type":"content","url":"/notebooks/lassoarmclouds#load-data-using-xarray-and-view-variables","position":11},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl3":"Plot Variables and Modify as Desired"},"type":"lvl3","url":"/notebooks/lassoarmclouds#plot-variables-and-modify-as-desired","position":12},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl3":"Plot Variables and Modify as Desired"},"content":"xwrf automatically corrected the time for us! So now we can focus on subsetting given an hour. In this case, we are interested in 1700 UTC.\n\nds_stat.CSV_LWC\n\nhour_to_plot = 17\n\n# Time series:\nds_stat[\"CST_LWP\"].plot()\nplt.show()\n\n# Profile at a selected time (plots sideways, though, since we are being lazy):\nds_stat[\"CSP_LWC\"].sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\").plot()\nplt.show()\n\n# X-Y slice for a selected time:\nds_stat[\"CSS_LWP\"].sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\").plot()\nplt.show()\n\n# A vertical slice from the volume at a selected time:\n# We'll assign the vertical coordinate values for this one and hide the cloud-free upper atmosphere.\nplot_data = ds_stat[\"CSV_LWC\"].assign_coords(height=(ds_stat[\"CSP_Z\"]))\nplot_data.sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\", y=-12450).plot(y=\"height\", ylim=[0, 1500])\nplt.show()\n\n# Add lines and modify variables to plot desired figures... In this notebook, we plotted \n\n","type":"content","url":"/notebooks/lassoarmclouds#plot-variables-and-modify-as-desired","position":13},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl2":"Plot wind speed"},"type":"lvl2","url":"/notebooks/lassoarmclouds#plot-wind-speed","position":14},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl2":"Plot wind speed"},"content":"Let’s start with the first 10 files from the WRF simulation.\n\n# Note the extra details required by open_mfdataset to connect the files together in time.\nds_wrf = xr.open_mfdataset(wrfout_file_list[:10],\n                           combine=\"nested\",\n                           concat_dim=\"Time\")\n\nSince we did not use xwrf, this time, let’s fix the times.\n\nds_wrf[\"Time\"] = ds_wrf[\"XTIME\"]\n\n","type":"content","url":"/notebooks/lassoarmclouds#plot-wind-speed","position":15},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl3":"Visualize the Wind Vectors and Expose Destaggering","lvl2":"Plot wind speed"},"type":"lvl3","url":"/notebooks/lassoarmclouds#visualize-the-wind-vectors-and-expose-destaggering","position":16},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl3":"Visualize the Wind Vectors and Expose Destaggering","lvl2":"Plot wind speed"},"content":"Next, we plot wind vectors at a selected level to demonstrate how to destagger the wind components to cell-center values with xarray. The destaggering is something that we can automatically handle with xwrf, but we explain the process below to be more transparent, especially with winds that are not in the cell-centers.","type":"content","url":"/notebooks/lassoarmclouds#visualize-the-wind-vectors-and-expose-destaggering","position":17},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl4":"Destagger and Rename Dimensions","lvl3":"Visualize the Wind Vectors and Expose Destaggering","lvl2":"Plot wind speed"},"type":"lvl4","url":"/notebooks/lassoarmclouds#destagger-and-rename-dimensions","position":18},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl4":"Destagger and Rename Dimensions","lvl3":"Visualize the Wind Vectors and Expose Destaggering","lvl2":"Plot wind speed"},"content":"We need to:\n\ndestagger to cell centers\n\nrename the staggered dimension back to the non-staggered name to avoid dimension conflicts\n\n(re)name the unstaggered wind for convenience\n\nThen, we are able to put these new DataArrays back into the ds_wrf Dataset.\n\n# Plot wind vectors at a selected level to demonstrate how to destagger the wind components to cell-center values with xarray...\n\nplot_level = 12  # index of level to plot\nskip_xy = 10  # Sampling interval for the vector thinning\n\nnt, nz, ny, nx = ds_wrf[\"T\"].shape\n\nds_wrf[\"UA\"] = 0.5*( ds_wrf[\"U\"].isel(west_east_stag=slice(0, nx)) + \n                    ds_wrf[\"U\"].shift(west_east_stag=-1).isel(west_east_stag=slice(0, nx)) ).\\\n                    rename(\"UA\").rename(west_east_stag=\"west_east\")\nds_wrf[\"VA\"] = 0.5*( ds_wrf[\"V\"].isel(south_north_stag=slice(0, ny)) + \n                    ds_wrf[\"V\"].shift(south_north_stag=-1).isel(south_north_stag=slice(0, ny)) ).\\\n                    rename(\"VA\").rename(south_north_stag=\"south_north\")\nds_wrf[\"SPD\"] = np.sqrt(ds_wrf[\"UA\"]**2 + ds_wrf[\"VA\"]**2).rename(\"wind speed\").\\\n                    assign_attrs(units=\"m s-1\", description=\"wind speed\")\n\n","type":"content","url":"/notebooks/lassoarmclouds#destagger-and-rename-dimensions","position":19},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl4":"Visualize the Speed and Wind Vectors","lvl3":"Visualize the Wind Vectors and Expose Destaggering","lvl2":"Plot wind speed"},"type":"lvl4","url":"/notebooks/lassoarmclouds#visualize-the-speed-and-wind-vectors","position":20},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl4":"Visualize the Speed and Wind Vectors","lvl3":"Visualize the Wind Vectors and Expose Destaggering","lvl2":"Plot wind speed"},"content":"Now, we can proceed to more plotting-specific data manipulation. We need to add spatial variables for the idealized domain (since XLAT and XLONG are constant in the file). This is needed by the xarray quiver routine.\n\nThen, thin the grid to reduce the number of arrrows.\n\nds_wrf[\"west_east\"] = xr.DataArray(data=np.arange(nx)*ds_wrf.attrs[\"DX\"], dims=\"west_east\", name=\"west_east\", attrs={\"units\": \"m\"})\nds_wrf[\"south_north\"] = xr.DataArray(data=np.arange(ny)*ds_wrf.attrs[\"DX\"], dims=\"south_north\", name=\"south_north\", attrs={\"units\": \"m\"})\n\nds_wrf_thinned = ds_wrf.\\\n    isel(west_east=slice(0, nx, skip_xy), south_north=slice(0, ny, skip_xy), bottom_top=plot_level).\\\n    sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\")\n\nfig, ax = plt.subplots(ncols=1)\nds_wrf_thinned[\"SPD\"].plot(ax=ax, x=\"west_east\", y=\"south_north\")\nds_wrf_thinned.plot.quiver(ax=ax, x=\"west_east\", y=\"south_north\", u=\"UA\", v=\"VA\",\n                           scale=100)\nplt.show()\n\n","type":"content","url":"/notebooks/lassoarmclouds#visualize-the-speed-and-wind-vectors","position":21},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl3":"Compare with Observational Data from ARM","lvl2":"Plot wind speed"},"type":"lvl3","url":"/notebooks/lassoarmclouds#compare-with-observational-data-from-arm","position":22},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl3":"Compare with Observational Data from ARM","lvl2":"Plot wind speed"},"content":"Now that we have plotted the simulation data from WRF, let’s take a look at the observations.\n\nfs.glob(f\"{path}/*\")\n\nfs.glob('pythia/lasso-sgp/high_res_obs/sgp*')\n\n# Compare with ARM Observational Data\n\nimport os\n\nfrom arm_test_data import DATASETS\nimport matplotlib.pyplot as plt\n\nimport act\n\n# Place your username and token here\nusername = os.getenv('ARM_USERNAME')\ntoken = os.getenv('ARM_PASSWORD')\n\n# If the username and token are not set, use the existing sample file\nif username is None or token is None or len(username) == 0 or len(token) == 0:\n    filename_ceil = DATASETS.fetch('sgpceilC1.b1.20190101.000000.nc')\n    ceil_ds = act.io.arm.read_arm_netcdf(filename_ceil, engine='netcdf4')\nelse:\n    # Example to show how easy it is to download ARM data if a username/token are set\n    results = act.discovery.download_arm_data(\n        username, token, 'sgpceilC1.b1', '2022-01-14', '2022-01-19'\n    )\n    ceil_ds = act.io.arm.read_arm_netcdf(results)\n\n# Adjust ceilometer data for plotting\nceil_ds = act.corrections.ceil.correct_ceil(ceil_ds, -9999.0)\n\n# Plot up ceilometer backscatter using HomeyerRainbow CVD friendly colormap\n# The same could be done with keyword 'cmap='HomeyerRainbow'\ndisplay = act.plotting.TimeSeriesDisplay(ceil_ds, subplot_shape=(1,), figsize=(15, 5))\ndisplay.plot('backscatter', subplot_index=(0,), cvd_friendly=True)\nplt.show()\n\n# ARM Plotting v2\nimport act\nimport numpy as np\nimport xarray as xr\nimport matplotlib.pyplot as plt\n\n","type":"content","url":"/notebooks/lassoarmclouds#compare-with-observational-data-from-arm","position":23},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl2":"Plot Desired Variables"},"type":"lvl2","url":"/notebooks/lassoarmclouds#plot-desired-variables","position":24},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl2":"Plot Desired Variables"},"content":"\n\n# Set your username and token here!\nusername = '***'\ntoken = '***'\n\n# Set the datastream and start/enddates\ndatastream = 'sgpaosmetE13.a1'\nstartdate = '2019-04-04'\nenddate = '2019-04-05'\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\n\n# Let's read in the data using ACT and check out the data\nds_mpl = act.io.read_arm_netcdf(result)\n\nds_mpl\n\n","type":"content","url":"/notebooks/lassoarmclouds#plot-desired-variables","position":25},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl2":"Change variable (as desired), Apply QC, and Plot Again"},"type":"lvl2","url":"/notebooks/lassoarmclouds#change-variable-as-desired-apply-qc-and-plot-again","position":26},{"hierarchy":{"lvl1":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","lvl2":"Change variable (as desired), Apply QC, and Plot Again"},"content":"\n\n# Let's take a look at the quality control information associated with a variable from the MPL\nvariable = 'temperature_ambient'\n\n# First, for many of the ACT QC features, we need to get the dataset more to CF standard and that\n# involves cleaning up some of the attributes and ways that ARM has historically handled QC\nds_mpl.clean.cleanup()\n\n# Apply corrections for the ceilometer, correcting for the vertical height\n#ds_mpl = act.corrections.ceil.correct_ceil(ds_mpl,-999.0)\n\n# Next, let's take a look at visualizing the quality control information\n# Create a plotting display object with 2 plots\ndisplay = act.plotting.TimeSeriesDisplay(ds_mpl, figsize=(10, 5), subplot_shape=(1,))\n\n# # Plot up the variable in the first plot\ndisplay.plot(variable, subplot_index=(0,))\n\n# # Plot up the QC variable in the second plot\n# #display.qc_flag_block_plot(variable, subplot_index=(1,))\n# plt.show()","type":"content","url":"/notebooks/lassoarmclouds#change-variable-as-desired-apply-qc-and-plot-again","position":27},{"hierarchy":{"lvl1":"LASSO - LES simulations with different Large-Scale forcing scales for 4th April 2019 over SGP"},"type":"lvl1","url":"/notebooks/cloud-organization","position":0},{"hierarchy":{"lvl1":"LASSO - LES simulations with different Large-Scale forcing scales for 4th April 2019 over SGP"},"content":"# Libraries required for this tutorial...\n\n# import dask\nfrom datetime import datetime\nimport numpy as np\nimport xarray as xr\nimport xwrf\n\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot as pl\n# Plotting wrfstat variables...\nfrom distributed import Client\nclient = Client(\"tcp://127.0.0.1:44455\")\npath_shcu_root = \"/data/project/ARM_Summer_School_2024_Data/lasso_tutorial/ShCu/untar\"  # on Jupyter\n\ncase_date = datetime(2019, 4, 4)\nsim_id = [6,7,8]\n\nds_stat_1 = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id[0]:04d}/raw_model/wrfstat_d01_{case_date:%Y-%m-%d_12:00:00}.nc\")\nds_stat_2 = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id[1]:04d}/raw_model/wrfstat_d01_{case_date:%Y-%m-%d_12:00:00}.nc\")\nds_stat_3 = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id[2]:04d}/raw_model/wrfstat_d01_{case_date:%Y-%m-%d_12:00:00}.nc\")\nds_stat_1 = ds_stat_1.assign_coords(height=(ds_stat_1[\"CSP_Z\"]))\nds_stat_2 = ds_stat_2.assign_coords(height=(ds_stat_2[\"CSP_Z\"]))\nds_stat_3 = ds_stat_3.assign_coords(height=(ds_stat_3[\"CSP_Z\"]))\nds_stat_3[\"Time\"] = ds_stat_3[\"XTIME\"]\nds_stat_2[\"Time\"] = ds_stat_2[\"XTIME\"]\nds_stat_1[\"Time\"] = ds_stat_1[\"XTIME\"]\n\n# Note the extra details required by open_mfdataset to connect the files together in time.\nds_xwrf_1 = xr.open_mfdataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id[0]:04d}/raw_model/wrfout_d01_*.nc\", combine=\"nested\", concat_dim=\"Time\").xwrf.postprocess()\nds_xwrf_2 = xr.open_mfdataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id[1]:04d}/raw_model/wrfout_d01_*.nc\", combine=\"nested\", concat_dim=\"Time\").xwrf.postprocess()\nds_xwrf_3 = xr.open_mfdataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id[2]:04d}/raw_model/wrfout_d01_*.nc\", combine=\"nested\", concat_dim=\"Time\").xwrf.postprocess()\nds_xwrf_3[\"Time\"] = ds_xwrf_3[\"XTIME\"]\nds_xwrf_2[\"Time\"] = ds_xwrf_2[\"XTIME\"]\nds_xwrf_1[\"Time\"] = ds_xwrf_1[\"XTIME\"]\n\n","type":"content","url":"/notebooks/cloud-organization","position":1},{"hierarchy":{"lvl1":"LASSO - LES simulations with different Large-Scale forcing scales for 4th April 2019 over SGP","lvl2":"Advection Input to LES simulations with different forcings scale and corresponding LES output thermodynamic and Cloud time-height profiles"},"type":"lvl2","url":"/notebooks/cloud-organization#advection-input-to-les-simulations-with-different-forcings-scale-and-corresponding-les-output-thermodynamic-and-cloud-time-height-profiles","position":2},{"hierarchy":{"lvl1":"LASSO - LES simulations with different Large-Scale forcing scales for 4th April 2019 over SGP","lvl2":"Advection Input to LES simulations with different forcings scale and corresponding LES output thermodynamic and Cloud time-height profiles"},"content":"Humidity and Heat coming into the LES domain due to large-scale forcings is dinstinctly different for increasing forcing scales. These also correspond to very different intensities in cloud water content and other cloud structure properties.\n\nimport numpy as np\nimport matplotlib.ticker as tkr\n\npl.rcParams['xtick.labelsize'] = 16\npl.rcParams['ytick.labelsize'] = 16\npl.rcParams['axes.labelsize'] = 16\npl.rcParams['axes.titlesize'] = 16\npl.rcParams['legend.fontsize'] = 16\n\ndef plot_contour(var_name,label_name,min_level,max_level):\n    fig,ax = pl.subplots(1,3,figsize=(27,5))\n    pl.subplot(131)\n    ds_stat_1[var_name].plot.contourf(x='Time',y='height',levels=np.linspace(min_level,max_level,10),add_colorbar=False,cmap='coolwarm')\n    pl.ylim([0,5000])\n    pl.title(label_name[0])\n    pl.subplot(132)\n    ds_stat_2[var_name].plot.contourf(x='Time',y='height',levels=np.linspace(min_level,max_level,10),add_colorbar=False,cmap='coolwarm')\n    pl.title(label_name[1])\n    pl.ylabel('')\n    pl.ylim([0,5000])\n    pl.subplot(133)\n    p1=ds_stat_3[var_name].plot.contourf(x='Time',y='height',levels=np.linspace(min_level,max_level,10),add_colorbar=False,cmap='coolwarm')\n    pl.ylabel('')\n    pl.ylim([0,5000])\n    fig.subplots_adjust(right=0.8)\n    cbar_ax = fig.add_axes([0.85, 0.15, 0.05, 0.7])\n    cb2 = fig.colorbar(p1,format=tkr.FormatStrFormatter('%.3g'),cax=cbar_ax)\n    pl.title(label_name[2])\n    \nplot_contour('CSP_THDT_LSHOR',['','TH Advection Horizontal',''],-1e-4,1e-4)\nplot_contour('CSP_TH',['','TH - LES',''],280,310)\nplot_contour('CSP_QVDT_LSHOR',['','QV Advection Horizontal',''],0,2e-7)\nplot_contour('CSP_QV',['','QV - LES',''],0,0.011)\nplot_contour('CSP_QL',['','QL',''],0,5e-5)\n\npl.figure(figsize=(7,5))\nds_stat_1['CST_PRECT'].plot.line(label='75 km')\nds_stat_2['CST_PRECT'].plot.line(label='150 km')\nds_stat_2['CST_PRECT'].plot.line(label='300 km')\n\n","type":"content","url":"/notebooks/cloud-organization#advection-input-to-les-simulations-with-different-forcings-scale-and-corresponding-les-output-thermodynamic-and-cloud-time-height-profiles","position":3},{"hierarchy":{"lvl1":"LASSO - LES simulations with different Large-Scale forcing scales for 4th April 2019 over SGP","lvl2":"Which of the forcing scales produces clouds close to what was observed from satellie images (GOES)?"},"type":"lvl2","url":"/notebooks/cloud-organization#which-of-the-forcing-scales-produces-clouds-close-to-what-was-observed-from-satellie-images-goes","position":4},{"hierarchy":{"lvl1":"LASSO - LES simulations with different Large-Scale forcing scales for 4th April 2019 over SGP","lvl2":"Which of the forcing scales produces clouds close to what was observed from satellie images (GOES)?"},"content":"\n\nsim_id=6\nds_cogs_1 = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id:04d}/obs_model/sgplassocogsdiagobsmod{sim_id}C1.m1.{case_date:%Y%m%d}.120000.nc\")\nsim_id=7\nds_cogs_2 = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id:04d}/obs_model/sgplassocogsdiagobsmod{sim_id}C1.m1.{case_date:%Y%m%d}.120000.nc\")\nsim_id=8\nds_cogs_3 = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id:04d}/obs_model/sgplassocogsdiagobsmod{sim_id}C1.m1.{case_date:%Y%m%d}.120000.nc\")\n\nfig, ax = plt.subplots(ncols=1,figsize=(7,5))\nds_cogs_1[\"low_cloud_fraction_cogs\"].isel(source_type=0).plot(ax=ax, marker=\"o\", label=\"COGS\",color='k')\nds_cogs_1[\"low_cloud_fraction_cogs\"].isel(source_type=1).plot(ax=ax, marker=\"o\", label=\"Sim6\", color='b')\nds_cogs_2[\"low_cloud_fraction_cogs\"].isel(source_type=1).plot(ax=ax, marker=\"o\", label=\"Sim7\", color= 'r')\nds_cogs_3[\"low_cloud_fraction_cogs\"].isel(source_type=1).plot(ax=ax, marker=\"o\", label=\"Sim8\", color = 'g')\n# If you plan to share with frieds, do a little clean-up beyond the default labelling from xarray...\nax.legend()\nax.set_title(\"COGS vs. WRF Cloud Fraction\")\nax.set_xlabel(\"Time (UTC)\")\nax.set_ylabel(\"Cloud Fraction\")\nplt.show()\n\nds_may_1=xr.open_dataset('/data/project/ARM_Summer_School_2024_Data/lasso_tutorial/ShCu/untar/20190506/sim0006/obs_model/sgplassocogsdiagobsmod6C1.m1.20190506.120000.nc',decode_times=True)\nds_may_2=xr.open_dataset('/data/project/ARM_Summer_School_2024_Data/lasso_tutorial/ShCu/untar/20190506/sim0007/obs_model/sgplassocogsdiagobsmod7C1.m1.20190506.120000.nc',decode_times=True)\nds_may_3=xr.open_dataset('/data/project/ARM_Summer_School_2024_Data/lasso_tutorial/ShCu/untar/20190506/sim0008/obs_model/sgplassocogsdiagobsmod8C1.m1.20190506.120000.nc',decode_times=True)\n\n\nfig, ax = plt.subplots(ncols=1,figsize=(7,5))\nds_may_1[\"low_cloud_fraction_cogs\"].isel(source_type=0).plot(ax=ax, marker=\"o\", label=\"COGS\",color='k')\nds_may_1[\"low_cloud_fraction_cogs\"].isel(source_type=1).plot(ax=ax, marker=\"o\", label=\"Sim6\", color='b')\nds_may_2[\"low_cloud_fraction_cogs\"].isel(source_type=1).plot(ax=ax, marker=\"o\", label=\"Sim7\", color= 'r')\nds_may_3[\"low_cloud_fraction_cogs\"].isel(source_type=1).plot(ax=ax, marker=\"o\", label=\"Sim8\", color = 'g')\n# If you plan to share with frieds, do a little clean-up beyond the default labelling from xarray...\nax.legend()\nax.set_title(\"COGS vs. WRF Cloud Fraction\")\nax.set_xlabel(\"Time (UTC)\")\nax.set_ylabel(\"Cloud Fraction\")\nplt.show()\n\n","type":"content","url":"/notebooks/cloud-organization#which-of-the-forcing-scales-produces-clouds-close-to-what-was-observed-from-satellie-images-goes","position":5},{"hierarchy":{"lvl1":"LASSO - LES simulations with different Large-Scale forcing scales for 4th April 2019 over SGP","lvl2":"Are these differences we notice in Cloud structure statistics reprsentative of what’s going on at the 3-d level?"},"type":"lvl2","url":"/notebooks/cloud-organization#are-these-differences-we-notice-in-cloud-structure-statistics-reprsentative-of-whats-going-on-at-the-3-d-level","position":6},{"hierarchy":{"lvl1":"LASSO - LES simulations with different Large-Scale forcing scales for 4th April 2019 over SGP","lvl2":"Are these differences we notice in Cloud structure statistics reprsentative of what’s going on at the 3-d level?"},"content":"To check this we track each individual cloud cells (cluster of all adjacent cloudy cells) defined by x,y dependent cloud water path (ql_path) > 0.005\n\n#### Field Plots #####\nimport os\nimport numpy as np\nimport matplotlib.pyplot as pl\nfrom matplotlib import cm\nimport math\nfrom scipy.stats import norm\nimport xarray as xr\nimport netCDF4 as nc\nimport sys\n\nsys.setrecursionlimit(1000000)\n\n##########################################################################################\nclass cell:\n    def __init__(self, id):\n        self.id = id\n        self.value = [[],[]]\n        self.location = [[],[]]\n        self.nelements = 0\n        self.nelements_local = 0\n\n    def add_elements(self, i, j, var_values):\n        self.location[0].append(i)\n        self.location[1].append(j)\n        self.value[0].append(var_values)\n        self.nelements = self.nelements + 1\n        self.nelements_local = self.nelements_local + 1\n    def __del__(self):\n        return\n##########################################################################################\ndef find_boolean(variable, threshold_criteria): #variable is f(i, j, t): --> outputs boolean -1 (unsatisfied) 0 (satisfied) \n    boolean = np.zeros(( len(variable[:,0]), len(variable[0,:])))\n    boolean = -1\n    boolean = np.where(variable[:,:]>threshold_criteria,0,-1)\n    return boolean;\n########################################################################################\ndef identify_elements_in_cell(i,j,new_cell):  #input the ijk at which boolean is satisfied along with boolean and new cell created \n\n    global booli;\n    new_cell.add_elements(i,j,cell_variable[i,j])\n    booli[i,j] = -1\n\n    ii=i-1; jj=j; #look west\n    if ii<0:\n       ii = nx-1\n    if (booli[ii,jj] == 0):\n        identify_elements_in_cell(ii,jj,new_cell)  \n\n    ii=i+1; jj=j;  #look east\n    if ii>nx-1:\n       ii = 0\n    if (booli[ii,jj] == 0):\n        identify_elements_in_cell(ii,jj,new_cell)  \n\n    ii=i; jj=j+1;  #look north\n    if jj>ny-1:\n        jj = 0\n    if (booli[ii,jj] == 0):\n        identify_elements_in_cell(ii,jj,new_cell)  \n\n    ii=i; jj=j-1;  #look south\n    if jj<0:\n       jj = ny-1\n    if (booli[ii,jj] == 0):\n        identify_elements_in_cell(ii,jj,new_cell) \n#################################################################################################\ndef create_new_cell(variable,bool):                                # input the boolean and the variable, output is the cells tracked (i,j,t) based on boolean \n    cell_number = 0;\n    global booli,cell_variable,nx,ny;\n    nx = len(variable[:,0])\n    ny = len(variable[0,:])\n    booli=bool;cell_variable = variable;\n    variable_cells = []\n    for j in range(0,ny):\n        for i in range(0,nx):\n            if booli[i,j]==0: \n                new_cell=cell(cell_number) \n                identify_elements_in_cell(i,j,new_cell)\n                if new_cell.nelements>=nminelems:\n                    variable_cells.append(new_cell)\n                    variable_cells[cell_number].id = cell_number\n                    cell_number = cell_number + 1\n                else:\n                    del new_cell;\n    return variable_cells, cell_number;\n#################################################################################################\ndef run_tracking(tracked_variable,param_threshold):\n    global nx,ny;\n    nx = len(tracked_variable[:,0]); ny = len(tracked_variable[0,:]); \n    bool = find_boolean(tracked_variable,param_threshold)\n    [cells,cell_number] = create_new_cell(tracked_variable,bool);\n    return cells,cell_number;\n####################################################################################################\ndef find_cell_centers(cells,ncells):\n    centers=np.zeros((ncells,2))\n    max_cloudsize=0;\n    for i in range(0,ncells):\n        centers[i,0]=np.mean(cells[i].location[0])\n        centers[i,1]=np.mean(cells[i].location[1])\n        if cells[i].nelements>max_cloudsize:\n            max_cloudsize=cells[i].nelements\n    return centers,max_cloudsize;\n####################################################################################################\ndef find_nearest_neighbor(centers,nx,ny):\n    distance=np.zeros(len(centers[:,0]))\n    nn_distance=np.zeros(len(centers[:,0]))\n    for i in range(len(centers[:,0])):\n        for j in range(len(centers[:,0])):\n            if i==j:\n                distance[j]=100;\n            else:\n                xdist=min(abs(centers[i,0]+nx-centers[j,0]),abs(centers[i,0]-nx-centers[j,0]),abs(centers[i,0]-centers[j,0]))\n                ydist=min(abs(centers[i,1]+ny-centers[j,1]),abs(centers[i,1]-ny-centers[j,1]),abs(centers[i,1]-centers[j,1]))\n                distance[j]=math.sqrt(xdist**2+ydist**2)\n        nn_distance[i]=min(distance)\n    return nn_distance;\n####################################################################################################\ndef retrieve_variable(variable_name,netcdf_path): #open corresponding netcdf file and read data\n    all_data=xr.open_dataset(netcdf_path,decode_times=False)\n    var=all_data[variable_name].values\n    variable=var\n    x=all_data['x'].values\n    y=all_data['y'].values\n    t=all_data['Time'].values\n    return variable, x, y, t;    \n##########################################################################################\n#[w_cross,x,y,t]=retrieve_variable(variable_name='w',netcdf_path='/fs/ess/PFS0220/eurec4a/case_1060lagtraj_feb2_withw/w_cross.nc')\ndef get_iorg(xr_data,variable_name,param_threshold,start_ind,slice_len):\n    variable=xr_data[variable_name].values\n    i_org=np.zeros(xr_data.Time.size)\n    Max_Clouds=np.zeros(xr_data.Time.size)\n    for i in range(start_ind,xr_data.Time.size,slice_len):\n        if i%60==0:\n            print(i)\n        [clouds,ncells]=run_tracking(tracked_variable=variable[i,:,:],param_threshold=param_threshold)\n        if ncells<2:\n            i_org[i]=0;\n            Max_Clouds[i]=0;\n        else:\n            [centers,Max_Clouds[i]]=find_cell_centers(clouds,ncells)\n            nn_distance=find_nearest_neighbor(centers,nx,ny)\n            centers=centers.astype(int)\n            nn_sorted = np.sort(nn_distance);nn_sorted=nn_sorted/max(nn_sorted)\n            p = 1. * np.arange(len(nn_distance)) / (len(nn_distance) - 1)\n            p_ran=1-np.exp(-1*(math.pi)*nn_sorted*nn_sorted)\n            i_org[i]=np.trapz(p,x=p_ran)\n    xr_data['i_org']=xr.DataArray(i_org,dims=['Time'])\n    xr_data['Max_Clouds']=xr.DataArray(Max_Clouds,dims=['Time'])\n    return xr_data;\n#########################################################################################\n\n\nnminelems=10\nslice_len=1;\n\nds_xwrf_1=get_iorg(ds_xwrf_1,'qc_path',0.005,start_ind=0,slice_len=slice_len)\nds_xwrf_2=get_iorg(ds_xwrf_2,'qc_path',0.005,start_ind=0,slice_len=slice_len)\nds_xwrf_3=get_iorg(ds_xwrf_3,'qc_path',0.005,start_ind=0,slice_len=slice_len)\n\n","type":"content","url":"/notebooks/cloud-organization#are-these-differences-we-notice-in-cloud-structure-statistics-reprsentative-of-whats-going-on-at-the-3-d-level","position":7},{"hierarchy":{"lvl1":"LASSO - LES simulations with different Large-Scale forcing scales for 4th April 2019 over SGP","lvl2":"Organization Index (Randomness (=0) or Organization (=1) of tracked individual cloud cells) and Size of Cloud Cell with maximum area"},"type":"lvl2","url":"/notebooks/cloud-organization#organization-index-randomness-0-or-organization-1-of-tracked-individual-cloud-cells-and-size-of-cloud-cell-with-maximum-area","position":8},{"hierarchy":{"lvl1":"LASSO - LES simulations with different Large-Scale forcing scales for 4th April 2019 over SGP","lvl2":"Organization Index (Randomness (=0) or Organization (=1) of tracked individual cloud cells) and Size of Cloud Cell with maximum area"},"content":"\n\npl.figure(figsize=(7,5))\n(0.1*ds_xwrf_1['Max_Clouds']**(1/2)).plot.line(label='75km')\n(0.1*ds_xwrf_2['Max_Clouds']**(1/2)).plot.line(label='150km')\n(0.1*ds_xwrf_3['Max_Clouds']**(1/2)).plot.line(label='300km')\npl.ylabel('Cloud Size (km)')\npl.title('Size of the Largest Cloud Cell')\npl.legend()\n\npl.figure(figsize=(7,5))\nds_xwrf_1.i_org.rolling(Time=6, center=True).mean().dropna(\"Time\").plot.line(label='75km')\nds_xwrf_2.i_org.rolling(Time=6, center=True).mean().dropna(\"Time\").plot.line(label='150km')\nds_xwrf_3.i_org.rolling(Time=6, center=True).mean().dropna(\"Time\").plot.line(label='300km')\npl.ylabel(r'Organization Index ($I_{org}$)')\npl.title('Extent of Cloud Organization')\npl.legend()\n\n\n\n\n\n\nds_stat_1.CSP_Z.isel(bottom_top=75).values","type":"content","url":"/notebooks/cloud-organization#organization-index-randomness-0-or-organization-1-of-tracked-individual-cloud-cells-and-size-of-cloud-cell-with-maximum-area","position":9},{"hierarchy":{"lvl1":"Load in necessary packages"},"type":"lvl1","url":"/notebooks/moisture-divergence","position":0},{"hierarchy":{"lvl1":"Load in necessary packages"},"content":"# Libraries required for moisture convergence visualization\nfrom datetime import datetime\nimport numpy as np\nimport xarray as xr\nimport xwrf\nimport glob\nimport metpy.calc as mpcalc\nimport math\n\nimport matplotlib.pyplot as plt\n\n","type":"content","url":"/notebooks/moisture-divergence","position":1},{"hierarchy":{"lvl1":"Load in necessary packages","lvl2":"We will first identify LASSO SGP case(s) of interest"},"type":"lvl2","url":"/notebooks/moisture-divergence#we-will-first-identify-lasso-sgp-case-s-of-interest","position":2},{"hierarchy":{"lvl1":"Load in necessary packages","lvl2":"We will first identify LASSO SGP case(s) of interest"},"content":"\n\n# Define path to the lasso simulation data\npath_shcu_root = \"/data/project/ARM_Summer_School_2024_Data/lasso_tutorial/ShCu/untar\"  # on Jupyter\n\n#Define LASSO SGP case date and simulation of interest\ncase_date = datetime(2019, 4, 4) #Options[April 4, 2019; May 6, 2019]\nsim_id = 4\n\n#Load in LASSO wrfstat files. These provide 10-minute averages for various metorology variables and diagnostics\nds_stat = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id:04d}/raw_model/wrfstat_d01_{case_date:%Y-%m-%d_12:00:00}.nc\")\n#ds_stat\n\n#Load in LASSO-ShCu wrfout data, which is raw simulation output from the Weather Research and Forecasting (WRF) model run in an idealized LES mode.\n#Post process using xwrf package\nds = xr.open_mfdataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id:04d}/raw_model/wrfout_d01_*.nc\", combine=\"nested\", concat_dim=\"Time\").xwrf.postprocess()\n\n# By default, xarray does not interpret the wrfout/wrfstat time information in a way that attaches \n# it to each variable. Here is a trick to map the time held in XTIME with the Time coordinate \n# associated with each variable.\nds_stat[\"Time\"] = ds_stat[\"XTIME\"]\nds[\"Time\"] = ds[\"XTIME\"]\nds\n\n","type":"content","url":"/notebooks/moisture-divergence#we-will-first-identify-lasso-sgp-case-s-of-interest","position":3},{"hierarchy":{"lvl1":"Load in necessary packages","lvl2":"Moisture convergence requires U, V, and moisture Q. We load these in below:"},"type":"lvl2","url":"/notebooks/moisture-divergence#moisture-convergence-requires-u-v-and-moisture-q-we-load-these-in-below","position":4},{"hierarchy":{"lvl1":"Load in necessary packages","lvl2":"Moisture convergence requires U, V, and moisture Q. We load these in below:"},"content":"\n\n#Load in u, v, and q data\nU10 = ds[\"U10\"]\nV10 = ds[\"V10\"]\nQVAPOR = ds[\"QVAPOR\"].sel(z=10, method='nearest').sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\")\n\n#U and V have staggered x and y dimensions. The following unstaggers them to align with QVAPOR \nU = ds.U.interp(x_stag=ds.x)\nV = ds.V.interp(y_stag=ds.y)\n\nQVAPOR.shape\n\n# We can use xarray's plotting features to get time-labeled plots.\nhour_to_plot = 17 #UTC (6hrs after simulation start)\n\n#This line shows the U winds at 10m from the surface at 18UTC\nds[\"U10\"].sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\").plot()\n\n# Calculate the divergence of the flow\n# Multiply by the water vapor (QVAPOR) to get the moisture divergenc\n\ndiv = mpcalc.divergence(QVAPOR*ds[\"U10\"].sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\"), QVAPOR*ds[\"V10\"].sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\"))\n\n# start figure and set axis\nfig, ax = plt.subplots(figsize=(5, 5))\n\n# plot divergence and scale by 1e5\ncf = ax.contourf(ds.y, ds.x, div*1e5 , range(-15, 16, 1), cmap=plt.cm.bwr_r) #* 1e5\nplt.colorbar(cf, pad=0, aspect=50)\n#ax.barbs(ds.y.values, ds.x.values, ds.U10.sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\"), ds.V10.sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\"), color='black', length=0.5, alpha=0.5)\n#ax.set(xlim=(260, 270), ylim=(30, 40))\nax.set_title('Horizontal Moisture Divergence: 10m')\n#ax.set_\n\n#plt.show()\n\n","type":"content","url":"/notebooks/moisture-divergence#moisture-convergence-requires-u-v-and-moisture-q-we-load-these-in-below","position":5},{"hierarchy":{"lvl1":"Load in necessary packages","lvl2":"Moisture convergence at 1km"},"type":"lvl2","url":"/notebooks/moisture-divergence#moisture-convergence-at-1km","position":6},{"hierarchy":{"lvl1":"Load in necessary packages","lvl2":"Moisture convergence at 1km"},"content":"\n\n#Load in u, v, and q data\n#U and V have staggered x and y dimensions. The following unstaggers them to align with QVAPOR \nU = ds.U.interp(x_stag=ds.x)\nV = ds.V.interp(y_stag=ds.y)\n\nz = 1000 \n\nQVAPOR = ds[\"QVAPOR\"].sel(z=z,method='nearest').sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\")\nQVAPOR.shape\n\nU_at_z = U.sel(z=z,method='nearest').sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\")\nV_at_z = V.sel(z=z,method='nearest').sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\")\n\nprint(U_at_z.shape)\nprint(V_at_z.shape)\n\n# Calculate the divergence of the flow\n# Multiply by the water vapor (QVAPOR) to get the moisture divergenc\n\ndiv2 = mpcalc.divergence(QVAPOR*U_at_z, QVAPOR*V_at_z)\n\n# start figure and set axis\nfig2, ax = plt.subplots(figsize=(5, 5))\n\n# plot divergence and scale by 1e5\ncf = ax.contourf(ds.y, ds.x, div2*1e5 , range(-15, 16, 1), cmap=plt.cm.bwr_r) #* 1e5\nplt.colorbar(cf, pad=0, aspect=50)\n#ax.barbs(ds.y.values, ds.x.values, ds.U10.sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\"), ds.V10.sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\"), color='black', length=0.5, alpha=0.5)\n#ax.set(xlim=(260, 270), ylim=(30, 40))\nax.set_title('Horizontal Moisture Divergence: 1000m')\n\n\nplt.show()\n\nds","type":"content","url":"/notebooks/moisture-divergence#moisture-convergence-at-1km","position":7}]}