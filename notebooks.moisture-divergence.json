{"version":2,"kind":"Notebook","sha256":"c531ac58026f31eb37c4a75c180b571c1b6123a3dcf885b4777c7faccc3b71dd","slug":"notebooks.moisture-divergence","location":"/notebooks/moisture_divergence.ipynb","dependencies":[],"frontmatter":{"title":"Load in necessary packages","content_includes_title":false,"kernelspec":{"name":"conda-base-py","display_name":"Python [conda env:base] *","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true},"code":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/projectpythia/lasso-those-clouds-cookbook","copyright":"2024","numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/lasso-those-clouds-cookbook/blob/main/notebooks/moisture_divergence.ipynb","exports":[{"format":"ipynb","filename":"moisture_divergence.ipynb","url":"/lasso-those-clouds-cookbook/build/moisture_divergence-02d2f7223a5b84f8a6232e0d2727b333.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Libraries required for moisture convergence visualization\nfrom datetime import datetime\nimport numpy as np\nimport xarray as xr\nimport xwrf\nimport glob\nimport metpy.calc as mpcalc\nimport math\n\nimport matplotlib.pyplot as plt","key":"GhCO2Q3wtZ"},{"type":"output","id":"Z4XZEu5q5gCWHyQOl4vpe","data":[],"key":"p2h0aRlusr"}],"key":"gjeH5pXn93"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We will first identify LASSO SGP case(s) of interest","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"O6M42yO4kQ"}],"identifier":"we-will-first-identify-lasso-sgp-case-s-of-interest","label":"We will first identify LASSO SGP case(s) of interest","html_id":"we-will-first-identify-lasso-sgp-case-s-of-interest","implicit":true,"key":"euGnoLDQI1"}],"key":"uvLO5ZMUnz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Define path to the lasso simulation data\npath_shcu_root = \"/data/project/ARM_Summer_School_2024_Data/lasso_tutorial/ShCu/untar\"  # on Jupyter\n\n#Define LASSO SGP case date and simulation of interest\ncase_date = datetime(2019, 4, 4) #Options[April 4, 2019; May 6, 2019]\nsim_id = 4\n\n#Load in LASSO wrfstat files. These provide 10-minute averages for various metorology variables and diagnostics\nds_stat = xr.open_dataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id:04d}/raw_model/wrfstat_d01_{case_date:%Y-%m-%d_12:00:00}.nc\")\n#ds_stat\n\n#Load in LASSO-ShCu wrfout data, which is raw simulation output from the Weather Research and Forecasting (WRF) model run in an idealized LES mode.\n#Post process using xwrf package\nds = xr.open_mfdataset(f\"{path_shcu_root}/{case_date:%Y%m%d}/sim{sim_id:04d}/raw_model/wrfout_d01_*.nc\", combine=\"nested\", concat_dim=\"Time\").xwrf.postprocess()\n\n# By default, xarray does not interpret the wrfout/wrfstat time information in a way that attaches \n# it to each variable. Here is a trick to map the time held in XTIME with the Time coordinate \n# associated with each variable.\nds_stat[\"Time\"] = ds_stat[\"XTIME\"]\nds[\"Time\"] = ds[\"XTIME\"]\nds","key":"kE2WQ7Qdju"},{"type":"output","id":"EbTmJU58nWBBi9VFHdXB9","data":[{"output_type":"execute_result","execution_count":47,"metadata":{},"data":{"text/html":{"content_type":"text/html","hash":"fce13e9829199b780c92b8dfc09cf5c1","path":"/lasso-those-clouds-cookbook/build/fce13e9829199b780c92b8dfc09cf5c1.html"},"text/plain":{"content":"<xarray.Dataset> Size: 255GB\nDimensions:                    (Time: 91, y: 250, x: 250, soil_layers_stag: 5,\n                                z: 226, x_stag: 251, y_stag: 251, z_stag: 227,\n                                force_layers: 751)\nCoordinates: (12/15)\n    CLAT                       (y, x) float32 250kB dask.array<chunksize=(125, 125), meta=np.ndarray>\n    XLAT                       (y, x) float32 250kB dask.array<chunksize=(125, 125), meta=np.ndarray>\n    XLONG                      (y, x) float32 250kB dask.array<chunksize=(125, 125), meta=np.ndarray>\n    XTIME                      (Time) datetime64[ns] 728B dask.array<chunksize=(6,), meta=np.ndarray>\n    XLAT_U                     (y, x_stag) float32 251kB dask.array<chunksize=(125, 126), meta=np.ndarray>\n    XLONG_U                    (y, x_stag) float32 251kB dask.array<chunksize=(125, 126), meta=np.ndarray>\n    ...                         ...\n  * z_stag                     (z_stag) float32 908B 1.0 0.9959 ... 0.002178 0.0\n  * Time                       (Time) datetime64[ns] 728B 2019-04-04T12:00:00...\n  * y_stag                     (y_stag) float64 2kB -1.25e+04 ... 1.25e+04\n  * y                          (y) float64 2kB -1.245e+04 ... 1.245e+04\n  * x                          (x) float64 2kB -1.245e+04 ... 1.245e+04\n  * x_stag                     (x_stag) float64 2kB -1.25e+04 ... 1.25e+04\nDimensions without coordinates: soil_layers_stag, force_layers\nData variables: (12/251)\n    Times                      (Time) |S19 2kB dask.array<chunksize=(1,), meta=np.ndarray>\n    LU_INDEX                   (Time, y, x) float32 23MB dask.array<chunksize=(1, 125, 125), meta=np.ndarray>\n    ZS                         (Time, soil_layers_stag) float32 2kB dask.array<chunksize=(1, 5), meta=np.ndarray>\n    DZS                        (Time, soil_layers_stag) float32 2kB dask.array<chunksize=(1, 5), meta=np.ndarray>\n    VAR_SSO                    (Time, y, x) float32 23MB dask.array<chunksize=(1, 125, 125), meta=np.ndarray>\n    U                          (Time, z, y, x_stag) float32 5GB dask.array<chunksize=(1, 226, 125, 126), meta=np.ndarray>\n    ...                         ...\n    geopotential               (Time, z_stag, y, x) float32 5GB dask.array<chunksize=(1, 227, 125, 125), meta=np.ndarray>\n    geopotential_height        (Time, z_stag, y, x) float32 5GB dask.array<chunksize=(1, 227, 125, 125), meta=np.ndarray>\n    wind_east                  (Time, z, y, x) float32 5GB dask.array<chunksize=(1, 226, 125, 125), meta=np.ndarray>\n    wind_north                 (Time, z, y, x) float32 5GB dask.array<chunksize=(1, 226, 125, 125), meta=np.ndarray>\n    wind_east_10               (Time, y, x) float32 23MB dask.array<chunksize=(1, 125, 125), meta=np.ndarray>\n    wind_north_10              (Time, y, x) float32 23MB dask.array<chunksize=(1, 125, 125), meta=np.ndarray>\nAttributes: (12/142)\n    TITLE:                                  OUTPUT FROM WRF V3.8.1 MODEL\n    START_DATE:                            2019-04-04_12:00:00\n    SIMULATION_START_DATE:                 2019-04-04_12:00:00\n    WEST-EAST_GRID_DIMENSION:              251\n    SOUTH-NORTH_GRID_DIMENSION:            251\n    BOTTOM-TOP_GRID_DIMENSION:             227\n    ...                                    ...\n    config_aerosol:                        NA\n    config_forecast_time:                  15.0 h\n    config_boundary_method:                Periodic\n    config_microphysics:                   Thompson (mp_physics=8)\n    config_nickname:                       runlas20190404v1addhm\n    simulation_origin_host:                cumulus-login2.ccs.ornl.gov","content_type":"text/plain"}}}],"key":"t4Dw4d8mR6"}],"key":"jM8xOEvWc4"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Moisture convergence requires U, V, and moisture Q. We load these in below:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zE9INhyWdO"}],"identifier":"moisture-convergence-requires-u-v-and-moisture-q-we-load-these-in-below","label":"Moisture convergence requires U, V, and moisture Q. We load these in below:","html_id":"moisture-convergence-requires-u-v-and-moisture-q-we-load-these-in-below","implicit":true,"key":"TudRiCwZF4"}],"key":"ZsVqHKiRG5"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#Load in u, v, and q data\nU10 = ds[\"U10\"]\nV10 = ds[\"V10\"]\nQVAPOR = ds[\"QVAPOR\"].sel(z=10, method='nearest').sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\")\n\n#U and V have staggered x and y dimensions. The following unstaggers them to align with QVAPOR \nU = ds.U.interp(x_stag=ds.x)\nV = ds.V.interp(y_stag=ds.y)\n\nQVAPOR.shape","key":"OAxLKjR4Ca"},{"type":"output","id":"56h6cEyb9iIYaNoUb-Fth","data":[{"output_type":"execute_result","execution_count":119,"metadata":{},"data":{"text/plain":{"content":"(250, 250)","content_type":"text/plain"}}}],"key":"QR6bvTVn07"}],"key":"SM2BMSIwOJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# We can use xarray's plotting features to get time-labeled plots.\nhour_to_plot = 17 #UTC (6hrs after simulation start)\n\n#This line shows the U winds at 10m from the surface at 18UTC\nds[\"U10\"].sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\").plot()","key":"xkOyFBEV9e"},{"type":"output","id":"WeC1Id-reDYUTNmObGLLY","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"4f1fc501200f9bb1ec694b2dfdcf6872","path":"/lasso-those-clouds-cookbook/build/4f1fc501200f9bb1ec694b2dfdcf6872.png"},"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"}}}],"key":"QmNd7hjF9P"}],"key":"kImoG8lD4T"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Calculate the divergence of the flow\n# Multiply by the water vapor (QVAPOR) to get the moisture divergenc\n\ndiv = mpcalc.divergence(QVAPOR*ds[\"U10\"].sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\"), QVAPOR*ds[\"V10\"].sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\"))\n\n# start figure and set axis\nfig, ax = plt.subplots(figsize=(5, 5))\n\n# plot divergence and scale by 1e5\ncf = ax.contourf(ds.y, ds.x, div*1e5 , range(-15, 16, 1), cmap=plt.cm.bwr_r) #* 1e5\nplt.colorbar(cf, pad=0, aspect=50)\n#ax.barbs(ds.y.values, ds.x.values, ds.U10.sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\"), ds.V10.sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\"), color='black', length=0.5, alpha=0.5)\n#ax.set(xlim=(260, 270), ylim=(30, 40))\nax.set_title('Horizontal Moisture Divergence: 10m')\n#ax.set_\n\n#plt.show()","key":"GB9YCvPFVs"},{"type":"output","id":"bVIDWOSOcxC-iy3Mmqvh4","data":[{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_1554/326214781.py:4: UserWarning: More than one latitude coordinate present for variable .\n  div = mpcalc.divergence(QVAPOR*ds[\"U10\"].sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\"), QVAPOR*ds[\"V10\"].sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\"))\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"7e58d2bf268fe11e4a22f331ed8f0cf6","path":"/lasso-those-clouds-cookbook/build/7e58d2bf268fe11e4a22f331ed8f0cf6.png"},"text/plain":{"content":"<Figure size 500x500 with 2 Axes>","content_type":"text/plain"}}}],"key":"IdtzwMMX04"}],"key":"oCjSPDTmm7"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Moisture convergence at 1km","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fxVe3xj3rm"}],"identifier":"moisture-convergence-at-1km","label":"Moisture convergence at 1km","html_id":"moisture-convergence-at-1km","implicit":true,"key":"xO9nVybDae"}],"key":"elyrqUmoMY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#Load in u, v, and q data\n#U and V have staggered x and y dimensions. The following unstaggers them to align with QVAPOR \nU = ds.U.interp(x_stag=ds.x)\nV = ds.V.interp(y_stag=ds.y)\n\nz = 1000 \n\nQVAPOR = ds[\"QVAPOR\"].sel(z=z,method='nearest').sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\")\nQVAPOR.shape","key":"tg6gTZcHaE"},{"type":"output","id":"xkG-8MY7oHD4XYqtuuimV","data":[{"output_type":"execute_result","execution_count":148,"metadata":{},"data":{"text/plain":{"content":"(250, 250)","content_type":"text/plain"}}}],"key":"bA2OwkyciJ"}],"key":"cD181M0E9r"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"U_at_z = U.sel(z=z,method='nearest').sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\")\nV_at_z = V.sel(z=z,method='nearest').sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\")\n\nprint(U_at_z.shape)\nprint(V_at_z.shape)","key":"AVx7MZi9cb"},{"type":"output","id":"4Hm6KG2zB-Rr2OBoRTGU4","data":[{"name":"stdout","output_type":"stream","text":"(250, 250)\n(250, 250)\n"}],"key":"BGl4DEmVkN"}],"key":"nozBEmRGid"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Calculate the divergence of the flow\n# Multiply by the water vapor (QVAPOR) to get the moisture divergenc\n\ndiv2 = mpcalc.divergence(QVAPOR*U_at_z, QVAPOR*V_at_z)\n\n# start figure and set axis\nfig2, ax = plt.subplots(figsize=(5, 5))\n\n# plot divergence and scale by 1e5\ncf = ax.contourf(ds.y, ds.x, div2*1e5 , range(-15, 16, 1), cmap=plt.cm.bwr_r) #* 1e5\nplt.colorbar(cf, pad=0, aspect=50)\n#ax.barbs(ds.y.values, ds.x.values, ds.U10.sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\"), ds.V10.sel(Time=f\"{case_date:%Y-%m-%d} {hour_to_plot}:00\"), color='black', length=0.5, alpha=0.5)\n#ax.set(xlim=(260, 270), ylim=(30, 40))\nax.set_title('Horizontal Moisture Divergence: 1000m')\n\n\nplt.show()","key":"avLVl83RWa"},{"type":"output","id":"BtSTLZaifFbcbHq2DI9u-","data":[{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_1554/3030828318.py:4: UserWarning: More than one longitude coordinate present for variable .\n  div2 = mpcalc.divergence(QVAPOR*U_at_z, QVAPOR*V_at_z)\n/tmp/ipykernel_1554/3030828318.py:4: UserWarning: More than one latitude coordinate present for variable .\n  div2 = mpcalc.divergence(QVAPOR*U_at_z, QVAPOR*V_at_z)\n/tmp/ipykernel_1554/3030828318.py:4: UserWarning: More than one time coordinate present for variable .\n  div2 = mpcalc.divergence(QVAPOR*U_at_z, QVAPOR*V_at_z)\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"271aaced60ea47cab2cb3a66b78cd2c7","path":"/lasso-those-clouds-cookbook/build/271aaced60ea47cab2cb3a66b78cd2c7.png"},"text/plain":{"content":"<Figure size 500x500 with 2 Axes>","content_type":"text/plain"}}}],"key":"VBD3aTaAgc"}],"key":"zNtP8lermQ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds","key":"XdsZXzyOcq"},{"type":"output","id":"clYyB7DstjCAir6QMzrOa","data":[{"output_type":"execute_result","execution_count":144,"metadata":{},"data":{"text/html":{"content_type":"text/html","hash":"604895317492bb8387d98463e8728296","path":"/lasso-those-clouds-cookbook/build/604895317492bb8387d98463e8728296.html"},"text/plain":{"content":"<xarray.Dataset> Size: 255GB\nDimensions:                    (Time: 91, y: 250, x: 250, soil_layers_stag: 5,\n                                z: 226, x_stag: 251, y_stag: 251, z_stag: 227,\n                                force_layers: 751)\nCoordinates: (12/15)\n    CLAT                       (y, x) float32 250kB dask.array<chunksize=(125, 125), meta=np.ndarray>\n    XLAT                       (y, x) float32 250kB dask.array<chunksize=(125, 125), meta=np.ndarray>\n    XLONG                      (y, x) float32 250kB dask.array<chunksize=(125, 125), meta=np.ndarray>\n    XTIME                      (Time) datetime64[ns] 728B dask.array<chunksize=(6,), meta=np.ndarray>\n    XLAT_U                     (y, x_stag) float32 251kB dask.array<chunksize=(125, 126), meta=np.ndarray>\n    XLONG_U                    (y, x_stag) float32 251kB dask.array<chunksize=(125, 126), meta=np.ndarray>\n    ...                         ...\n  * z_stag                     (z_stag) float32 908B 1.0 0.9959 ... 0.002178 0.0\n  * Time                       (Time) datetime64[ns] 728B 2019-04-04T12:00:00...\n  * y_stag                     (y_stag) float64 2kB -1.25e+04 ... 1.25e+04\n  * y                          (y) float64 2kB -1.245e+04 ... 1.245e+04\n  * x                          (x) float64 2kB -1.245e+04 ... 1.245e+04\n  * x_stag                     (x_stag) float64 2kB -1.25e+04 ... 1.25e+04\nDimensions without coordinates: soil_layers_stag, force_layers\nData variables: (12/251)\n    Times                      (Time) |S19 2kB dask.array<chunksize=(1,), meta=np.ndarray>\n    LU_INDEX                   (Time, y, x) float32 23MB dask.array<chunksize=(1, 125, 125), meta=np.ndarray>\n    ZS                         (Time, soil_layers_stag) float32 2kB dask.array<chunksize=(1, 5), meta=np.ndarray>\n    DZS                        (Time, soil_layers_stag) float32 2kB dask.array<chunksize=(1, 5), meta=np.ndarray>\n    VAR_SSO                    (Time, y, x) float32 23MB dask.array<chunksize=(1, 125, 125), meta=np.ndarray>\n    U                          (Time, z, y, x_stag) float32 5GB dask.array<chunksize=(1, 226, 125, 126), meta=np.ndarray>\n    ...                         ...\n    geopotential               (Time, z_stag, y, x) float32 5GB dask.array<chunksize=(1, 227, 125, 125), meta=np.ndarray>\n    geopotential_height        (Time, z_stag, y, x) float32 5GB dask.array<chunksize=(1, 227, 125, 125), meta=np.ndarray>\n    wind_east                  (Time, z, y, x) float32 5GB dask.array<chunksize=(1, 226, 125, 125), meta=np.ndarray>\n    wind_north                 (Time, z, y, x) float32 5GB dask.array<chunksize=(1, 226, 125, 125), meta=np.ndarray>\n    wind_east_10               (Time, y, x) float32 23MB dask.array<chunksize=(1, 125, 125), meta=np.ndarray>\n    wind_north_10              (Time, y, x) float32 23MB dask.array<chunksize=(1, 125, 125), meta=np.ndarray>\nAttributes: (12/142)\n    TITLE:                                  OUTPUT FROM WRF V3.8.1 MODEL\n    START_DATE:                            2019-04-04_12:00:00\n    SIMULATION_START_DATE:                 2019-04-04_12:00:00\n    WEST-EAST_GRID_DIMENSION:              251\n    SOUTH-NORTH_GRID_DIMENSION:            251\n    BOTTOM-TOP_GRID_DIMENSION:             227\n    ...                                    ...\n    config_aerosol:                        NA\n    config_forecast_time:                  15.0 h\n    config_boundary_method:                Periodic\n    config_microphysics:                   Thompson (mp_physics=8)\n    config_nickname:                       runlas20190404v1addhm\n    simulation_origin_host:                cumulus-login2.ccs.ornl.gov","content_type":"text/plain"}}}],"key":"hvbBLss1Wz"}],"key":"w4AcBSHQ3J"}],"key":"wOAyhsf5Pc"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Clouds over SGP for April 4, 2019","url":"/notebooks/calc-cloud-base-and-top","group":"LASSO Simulation April 4, 2019 - Cloud base and Top"},"next":{"title":"The impact of large-scale forcing scales on clouds.","url":"/notebooks/forcingltke","group":"LASSO Simulation April 4, 2019 - Forcings TKE"}}},"domain":"http://localhost:3000"}