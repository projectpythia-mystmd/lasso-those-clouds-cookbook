{"version":2,"kind":"Notebook","sha256":"2838d9400cf0579598fd6b8e78a1c875b322ba2e8d0ab27f79deb8dec36c177f","slug":"notebooks.calc-cloud-base-and-top","location":"/notebooks/Calc_cloud_base_and_top.ipynb","dependencies":[],"frontmatter":{"title":"Clouds over SGP for April 4, 2019","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true},"code":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/projectpythia/lasso-those-clouds-cookbook","copyright":"2024","numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/lasso-those-clouds-cookbook/blob/main/notebooks/Calc_cloud_base_and_top.ipynb","exports":[{"format":"ipynb","filename":"Calc_cloud_base_and_top.ipynb","url":"/lasso-those-clouds-cookbook/build/Calc_cloud_base_and_-e86b4b78ba5b16f4f6a025a2160696ae.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Looking at LASSO data for April 4, 2019 to see meterological data and calculate cloud base and cloud top.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"sjmoL8upoM"}],"key":"dZ6NEvxst8"}],"key":"aO2Rfumfcl"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KSb264Jh4a"}],"key":"wEiRImdlQv"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OJPQXBrX3M"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"RUFlEdGntb"}],"key":"PUK4EiOpGU"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from datetime import datetime\nimport numpy as np\nimport xarray as xr\nimport fsspec\nimport xwrf\n\nimport matplotlib.pyplot as plt","key":"G1kWMAa5aY"},{"type":"output","id":"Q4T1I5FYkcg1KDWAvfbU0","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/xwrf/__init__.py:5: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.\n  from pkg_resources import DistributionNotFound, get_distribution\n"}],"key":"egYaZRRGSQ"}],"key":"jn8heOOqUD"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Bring in the data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"d4cXlHciLV"}],"identifier":"bring-in-the-data","label":"Bring in the data","html_id":"bring-in-the-data","implicit":true,"key":"BUaUFcwcnd"}],"key":"wFlbt2raAq"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Here is the raw model output from LASSO.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Rp1gwd84LE"}],"key":"wMtbNQDen3"}],"key":"LxTSo1tcJc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set the URL and path for the cloud\nURL = 'https://js2.jetstream-cloud.org:8001/'\npath = f'pythia/lasso-sgp'\n\n# Configure the s3-like storage endpoint on jetstream\nfs = fsspec.filesystem(\"s3\", anon=True, client_kwargs=dict(endpoint_url=URL))\n\n# Set the analysis date and simulation number\ncase_date = datetime(2019, 4, 4)\nsim_id = 7\n\n# Read the wrfstat files\nwrfstat_pattern = f's3://{path}/sim000{sim_id}/raw_model/wrfstat*'\nwrfstat_files = sorted(fs.glob(wrfstat_pattern))\n\n# Remotely read these into a list\nwrfstat_file_list = [fs.open(file) for file in wrfstat_files]\nwrfstat_file_list","key":"IppkXCegno"},{"type":"output","id":"a8Xe3hFjuy2y5WpduCKbM","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"[<File-like object S3FileSystem, pythia/lasso-sgp/sim0007/raw_model/wrfstat_d01_2019-04-04_12:00:00.nc>]","content_type":"text/plain"}}}],"key":"rvPBhaIF5q"}],"key":"tda3znWJRg"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load into an ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NBTLfiEoNO"},{"type":"inlineCode","value":"xarray.Dataset","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QzscKdDiPt"}],"identifier":"load-into-an-xarray-dataset","label":"Load into an xarray.Dataset","html_id":"load-into-an-xarray-dataset","implicit":true,"key":"l3yhXnYFHU"}],"key":"hoNFyTDNg8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds_stat = xr.open_mfdataset(wrfstat_file_list, engine='h5netcdf')\n\n# Rename time - in this case, we are not using xwrf to clean the dataset\nds_stat[\"Time\"] = ds_stat[\"XTIME\"]\nds_stat","key":"geh3uzngmI"},{"type":"output","id":"lABJAExL_7xhtfkGZXpPX","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mClientError\u001b[39m                               Traceback (most recent call last)\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/s3fs/core.py:114\u001b[39m, in \u001b[36m_error_wrapper\u001b[39m\u001b[34m(func, args, kwargs, retries)\u001b[39m\n\u001b[32m    113\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m114\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mawait\u001b[39;00m func(*args, **kwargs)\n\u001b[32m    115\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m S3_RETRYABLE_ERRORS \u001b[38;5;28;01mas\u001b[39;00m e:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/aiobotocore/context.py:36\u001b[39m, in \u001b[36mwith_current_context.<locals>.decorator.<locals>.wrapper\u001b[39m\u001b[34m(*args, **kwargs)\u001b[39m\n\u001b[32m     35\u001b[39m     \u001b[38;5;28;01mawait\u001b[39;00m resolve_awaitable(hook())\n\u001b[32m---> \u001b[39m\u001b[32m36\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mawait\u001b[39;00m func(*args, **kwargs)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/aiobotocore/client.py:415\u001b[39m, in \u001b[36mAioBaseClient._make_api_call\u001b[39m\u001b[34m(self, operation_name, api_params)\u001b[39m\n\u001b[32m    414\u001b[39m     error_class = \u001b[38;5;28mself\u001b[39m.exceptions.from_code(error_code)\n\u001b[32m--> \u001b[39m\u001b[32m415\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m error_class(parsed_response, operation_name)\n\u001b[32m    416\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\n\u001b[31mClientError\u001b[39m: An error occurred (PreconditionFailed) when calling the GetObject operation: None\n\nThe above exception was the direct cause of the following exception:\n\n\u001b[31mOSError\u001b[39m                                   Traceback (most recent call last)\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/s3fs/core.py:2378\u001b[39m, in \u001b[36mS3File._fetch_range\u001b[39m\u001b[34m(self, start, end)\u001b[39m\n\u001b[32m   2377\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m-> \u001b[39m\u001b[32m2378\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_fetch_range\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   2379\u001b[39m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mfs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2380\u001b[39m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mbucket\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2381\u001b[39m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2382\u001b[39m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mversion_id\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2383\u001b[39m \u001b[43m        \u001b[49m\u001b[43mstart\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2384\u001b[39m \u001b[43m        \u001b[49m\u001b[43mend\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2385\u001b[39m \u001b[43m        \u001b[49m\u001b[43mreq_kw\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mreq_kw\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2386\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   2388\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mOSError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m ex:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/s3fs/core.py:2550\u001b[39m, in \u001b[36m_fetch_range\u001b[39m\u001b[34m(fs, bucket, key, version_id, start, end, req_kw)\u001b[39m\n\u001b[32m   2549\u001b[39m logger.debug(\u001b[33m\"\u001b[39m\u001b[33mFetch: \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[33m/\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[33m, \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[33m-\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[33m\"\u001b[39m, bucket, key, start, end)\n\u001b[32m-> \u001b[39m\u001b[32m2550\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43msync\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfs\u001b[49m\u001b[43m.\u001b[49m\u001b[43mloop\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m_inner_fetch\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbucket\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mversion_id\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstart\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mend\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreq_kw\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/fsspec/asyn.py:103\u001b[39m, in \u001b[36msync\u001b[39m\u001b[34m(loop, func, timeout, *args, **kwargs)\u001b[39m\n\u001b[32m    102\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(return_result, \u001b[38;5;167;01mBaseException\u001b[39;00m):\n\u001b[32m--> \u001b[39m\u001b[32m103\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m return_result\n\u001b[32m    104\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/fsspec/asyn.py:56\u001b[39m, in \u001b[36m_runner\u001b[39m\u001b[34m(event, coro, result, timeout)\u001b[39m\n\u001b[32m     55\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m---> \u001b[39m\u001b[32m56\u001b[39m     result[\u001b[32m0\u001b[39m] = \u001b[38;5;28;01mawait\u001b[39;00m coro\n\u001b[32m     57\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m ex:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/s3fs/core.py:2568\u001b[39m, in \u001b[36m_inner_fetch\u001b[39m\u001b[34m(fs, bucket, key, version_id, start, end, req_kw)\u001b[39m\n\u001b[32m   2566\u001b[39m         resp[\u001b[33m\"\u001b[39m\u001b[33mBody\u001b[39m\u001b[33m\"\u001b[39m].close()\n\u001b[32m-> \u001b[39m\u001b[32m2568\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mawait\u001b[39;00m _error_wrapper(_call_and_read, retries=fs.retries)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/s3fs/core.py:146\u001b[39m, in \u001b[36m_error_wrapper\u001b[39m\u001b[34m(func, args, kwargs, retries)\u001b[39m\n\u001b[32m    145\u001b[39m err = translate_boto_error(err)\n\u001b[32m--> \u001b[39m\u001b[32m146\u001b[39m \u001b[38;5;28;01mraise\u001b[39;00m err\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/s3fs/core.py:114\u001b[39m, in \u001b[36m_error_wrapper\u001b[39m\u001b[34m(func, args, kwargs, retries)\u001b[39m\n\u001b[32m    113\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m114\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mawait\u001b[39;00m func(*args, **kwargs)\n\u001b[32m    115\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m S3_RETRYABLE_ERRORS \u001b[38;5;28;01mas\u001b[39;00m e:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/s3fs/core.py:2555\u001b[39m, in \u001b[36m_inner_fetch.<locals>._call_and_read\u001b[39m\u001b[34m()\u001b[39m\n\u001b[32m   2554\u001b[39m \u001b[38;5;28;01masync\u001b[39;00m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34m_call_and_read\u001b[39m():\n\u001b[32m-> \u001b[39m\u001b[32m2555\u001b[39m     resp = \u001b[38;5;28;01mawait\u001b[39;00m fs._call_s3(\n\u001b[32m   2556\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33mget_object\u001b[39m\u001b[33m\"\u001b[39m,\n\u001b[32m   2557\u001b[39m         Bucket=bucket,\n\u001b[32m   2558\u001b[39m         Key=key,\n\u001b[32m   2559\u001b[39m         Range=\u001b[33m\"\u001b[39m\u001b[33mbytes=\u001b[39m\u001b[38;5;132;01m%i\u001b[39;00m\u001b[33m-\u001b[39m\u001b[38;5;132;01m%i\u001b[39;00m\u001b[33m\"\u001b[39m % (start, end - \u001b[32m1\u001b[39m),\n\u001b[32m   2560\u001b[39m         **version_id_kw(version_id),\n\u001b[32m   2561\u001b[39m         **req_kw,\n\u001b[32m   2562\u001b[39m     )\n\u001b[32m   2563\u001b[39m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/s3fs/core.py:371\u001b[39m, in \u001b[36mS3FileSystem._call_s3\u001b[39m\u001b[34m(self, method, *akwarglist, **kwargs)\u001b[39m\n\u001b[32m    370\u001b[39m additional_kwargs = \u001b[38;5;28mself\u001b[39m._get_s3_method_kwargs(method, *akwarglist, **kwargs)\n\u001b[32m--> \u001b[39m\u001b[32m371\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mawait\u001b[39;00m _error_wrapper(\n\u001b[32m    372\u001b[39m     method, kwargs=additional_kwargs, retries=\u001b[38;5;28mself\u001b[39m.retries\n\u001b[32m    373\u001b[39m )\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/s3fs/core.py:146\u001b[39m, in \u001b[36m_error_wrapper\u001b[39m\u001b[34m(func, args, kwargs, retries)\u001b[39m\n\u001b[32m    145\u001b[39m err = translate_boto_error(err)\n\u001b[32m--> \u001b[39m\u001b[32m146\u001b[39m \u001b[38;5;28;01mraise\u001b[39;00m err\n\n\u001b[31mOSError\u001b[39m: [Errno 22] None\n\nDuring handling of the above exception, another exception occurred:\n\n\u001b[31mTypeError\u001b[39m                                 Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[3]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m1\u001b[39m ds_stat = \u001b[43mxr\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen_mfdataset\u001b[49m\u001b[43m(\u001b[49m\u001b[43mwrfstat_file_list\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mengine\u001b[49m\u001b[43m=\u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mh5netcdf\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[32m      3\u001b[39m \u001b[38;5;66;03m# Rename time - in this case, we are not using xwrf to clean the dataset\u001b[39;00m\n\u001b[32m      4\u001b[39m ds_stat[\u001b[33m\"\u001b[39m\u001b[33mTime\u001b[39m\u001b[33m\"\u001b[39m] = ds_stat[\u001b[33m\"\u001b[39m\u001b[33mXTIME\u001b[39m\u001b[33m\"\u001b[39m]\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/xarray/backends/api.py:1635\u001b[39m, in \u001b[36mopen_mfdataset\u001b[39m\u001b[34m(paths, chunks, concat_dim, compat, preprocess, engine, data_vars, coords, combine, parallel, join, attrs_file, combine_attrs, **kwargs)\u001b[39m\n\u001b[32m   1632\u001b[39m     open_ = open_dataset\n\u001b[32m   1633\u001b[39m     getattr_ = \u001b[38;5;28mgetattr\u001b[39m\n\u001b[32m-> \u001b[39m\u001b[32m1635\u001b[39m datasets = [\u001b[43mopen_\u001b[49m\u001b[43m(\u001b[49m\u001b[43mp\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mopen_kwargs\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mfor\u001b[39;00m p \u001b[38;5;129;01min\u001b[39;00m paths1d]\n\u001b[32m   1636\u001b[39m closers = [getattr_(ds, \u001b[33m\"\u001b[39m\u001b[33m_close\u001b[39m\u001b[33m\"\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m ds \u001b[38;5;129;01min\u001b[39;00m datasets]\n\u001b[32m   1637\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m preprocess \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/xarray/backends/api.py:687\u001b[39m, in \u001b[36mopen_dataset\u001b[39m\u001b[34m(filename_or_obj, engine, chunks, cache, decode_cf, mask_and_scale, decode_times, decode_timedelta, use_cftime, concat_characters, decode_coords, drop_variables, inline_array, chunked_array_type, from_array_kwargs, backend_kwargs, **kwargs)\u001b[39m\n\u001b[32m    675\u001b[39m decoders = _resolve_decoders_kwargs(\n\u001b[32m    676\u001b[39m     decode_cf,\n\u001b[32m    677\u001b[39m     open_backend_dataset_parameters=backend.open_dataset_parameters,\n\u001b[32m   (...)\u001b[39m\u001b[32m    683\u001b[39m     decode_coords=decode_coords,\n\u001b[32m    684\u001b[39m )\n\u001b[32m    686\u001b[39m overwrite_encoded_chunks = kwargs.pop(\u001b[33m\"\u001b[39m\u001b[33moverwrite_encoded_chunks\u001b[39m\u001b[33m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[32m--> \u001b[39m\u001b[32m687\u001b[39m backend_ds = \u001b[43mbackend\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen_dataset\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    688\u001b[39m \u001b[43m    \u001b[49m\u001b[43mfilename_or_obj\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    689\u001b[39m \u001b[43m    \u001b[49m\u001b[43mdrop_variables\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdrop_variables\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    690\u001b[39m \u001b[43m    \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mdecoders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    691\u001b[39m \u001b[43m    \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    692\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    693\u001b[39m ds = _dataset_from_backend_dataset(\n\u001b[32m    694\u001b[39m     backend_ds,\n\u001b[32m    695\u001b[39m     filename_or_obj,\n\u001b[32m   (...)\u001b[39m\u001b[32m    705\u001b[39m     **kwargs,\n\u001b[32m    706\u001b[39m )\n\u001b[32m    707\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m ds\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/xarray/backends/h5netcdf_.py:458\u001b[39m, in \u001b[36mH5netcdfBackendEntrypoint.open_dataset\u001b[39m\u001b[34m(self, filename_or_obj, mask_and_scale, decode_times, concat_characters, decode_coords, drop_variables, use_cftime, decode_timedelta, format, group, lock, invalid_netcdf, phony_dims, decode_vlen_strings, driver, driver_kwds, storage_options)\u001b[39m\n\u001b[32m    455\u001b[39m emit_phony_dims_warning, phony_dims = _check_phony_dims(phony_dims)\n\u001b[32m    457\u001b[39m filename_or_obj = _normalize_path(filename_or_obj)\n\u001b[32m--> \u001b[39m\u001b[32m458\u001b[39m store = \u001b[43mH5NetCDFStore\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    459\u001b[39m \u001b[43m    \u001b[49m\u001b[43mfilename_or_obj\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    460\u001b[39m \u001b[43m    \u001b[49m\u001b[38;5;28;43mformat\u001b[39;49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mformat\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m    461\u001b[39m \u001b[43m    \u001b[49m\u001b[43mgroup\u001b[49m\u001b[43m=\u001b[49m\u001b[43mgroup\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    462\u001b[39m \u001b[43m    \u001b[49m\u001b[43mlock\u001b[49m\u001b[43m=\u001b[49m\u001b[43mlock\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    463\u001b[39m \u001b[43m    \u001b[49m\u001b[43minvalid_netcdf\u001b[49m\u001b[43m=\u001b[49m\u001b[43minvalid_netcdf\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    464\u001b[39m \u001b[43m    \u001b[49m\u001b[43mphony_dims\u001b[49m\u001b[43m=\u001b[49m\u001b[43mphony_dims\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    465\u001b[39m \u001b[43m    \u001b[49m\u001b[43mdecode_vlen_strings\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdecode_vlen_strings\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    466\u001b[39m \u001b[43m    \u001b[49m\u001b[43mdriver\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdriver\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    467\u001b[39m \u001b[43m    \u001b[49m\u001b[43mdriver_kwds\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdriver_kwds\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    468\u001b[39m \u001b[43m    \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[43m=\u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    469\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    471\u001b[39m store_entrypoint = StoreBackendEntrypoint()\n\u001b[32m    473\u001b[39m ds = store_entrypoint.open_dataset(\n\u001b[32m    474\u001b[39m     store,\n\u001b[32m    475\u001b[39m     mask_and_scale=mask_and_scale,\n\u001b[32m   (...)\u001b[39m\u001b[32m    481\u001b[39m     decode_timedelta=decode_timedelta,\n\u001b[32m    482\u001b[39m )\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/xarray/backends/h5netcdf_.py:167\u001b[39m, in \u001b[36mH5NetCDFStore.open\u001b[39m\u001b[34m(cls, filename, mode, format, group, lock, autoclose, invalid_netcdf, phony_dims, decode_vlen_strings, driver, driver_kwds, storage_options)\u001b[39m\n\u001b[32m    162\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[32m    163\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33mcan\u001b[39m\u001b[33m'\u001b[39m\u001b[33mt open netCDF4/HDF5 as bytes \u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    164\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33mtry passing a path or file-like object\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    165\u001b[39m     )\n\u001b[32m    166\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(filename, io.IOBase):\n\u001b[32m--> \u001b[39m\u001b[32m167\u001b[39m     magic_number = \u001b[43mread_magic_number_from_file\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilename\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    168\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m magic_number.startswith(\u001b[33mb\u001b[39m\u001b[33m\"\u001b[39m\u001b[38;5;130;01m\\211\u001b[39;00m\u001b[33mHDF\u001b[39m\u001b[38;5;130;01m\\r\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\032\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[33m\"\u001b[39m):\n\u001b[32m    169\u001b[39m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[32m    170\u001b[39m             \u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mmagic_number\u001b[38;5;132;01m!r}\u001b[39;00m\u001b[33m is not the signature of a valid netCDF4 file\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    171\u001b[39m         )\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/xarray/core/utils.py:688\u001b[39m, in \u001b[36mread_magic_number_from_file\u001b[39m\u001b[34m(filename_or_obj, count)\u001b[39m\n\u001b[32m    686\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m filename_or_obj.tell() != \u001b[32m0\u001b[39m:\n\u001b[32m    687\u001b[39m         filename_or_obj.seek(\u001b[32m0\u001b[39m)\n\u001b[32m--> \u001b[39m\u001b[32m688\u001b[39m     magic_number = \u001b[43mfilename_or_obj\u001b[49m\u001b[43m.\u001b[49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcount\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    689\u001b[39m     filename_or_obj.seek(\u001b[32m0\u001b[39m)\n\u001b[32m    690\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/fsspec/spec.py:2111\u001b[39m, in \u001b[36mAbstractBufferedFile.read\u001b[39m\u001b[34m(self, length)\u001b[39m\n\u001b[32m   2108\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m length == \u001b[32m0\u001b[39m:\n\u001b[32m   2109\u001b[39m     \u001b[38;5;66;03m# don't even bother calling fetch\u001b[39;00m\n\u001b[32m   2110\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[33mb\u001b[39m\u001b[33m\"\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m-> \u001b[39m\u001b[32m2111\u001b[39m out = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mcache\u001b[49m\u001b[43m.\u001b[49m\u001b[43m_fetch\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mloc\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mloc\u001b[49m\u001b[43m \u001b[49m\u001b[43m+\u001b[49m\u001b[43m \u001b[49m\u001b[43mlength\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   2113\u001b[39m logger.debug(\n\u001b[32m   2114\u001b[39m     \u001b[33m\"\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[33m read: \u001b[39m\u001b[38;5;132;01m%i\u001b[39;00m\u001b[33m - \u001b[39m\u001b[38;5;132;01m%i\u001b[39;00m\u001b[33m \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[33m\"\u001b[39m,\n\u001b[32m   2115\u001b[39m     \u001b[38;5;28mself\u001b[39m,\n\u001b[32m   (...)\u001b[39m\u001b[32m   2118\u001b[39m     \u001b[38;5;28mself\u001b[39m.cache._log_stats(),\n\u001b[32m   2119\u001b[39m )\n\u001b[32m   2120\u001b[39m \u001b[38;5;28mself\u001b[39m.loc += \u001b[38;5;28mlen\u001b[39m(out)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/fsspec/caching.py:288\u001b[39m, in \u001b[36mReadAheadCache._fetch\u001b[39m\u001b[34m(self, start, end)\u001b[39m\n\u001b[32m    286\u001b[39m end = \u001b[38;5;28mmin\u001b[39m(\u001b[38;5;28mself\u001b[39m.size, end + \u001b[38;5;28mself\u001b[39m.blocksize)\n\u001b[32m    287\u001b[39m \u001b[38;5;28mself\u001b[39m.total_requested_bytes += end - start\n\u001b[32m--> \u001b[39m\u001b[32m288\u001b[39m \u001b[38;5;28mself\u001b[39m.cache = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mfetcher\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstart\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mend\u001b[49m\u001b[43m)\u001b[49m  \u001b[38;5;66;03m# new block replaces old\u001b[39;00m\n\u001b[32m    289\u001b[39m \u001b[38;5;28mself\u001b[39m.start = start\n\u001b[32m    290\u001b[39m \u001b[38;5;28mself\u001b[39m.end = \u001b[38;5;28mself\u001b[39m.start + \u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m.cache)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/lasso-those-clouds-cookbook-dev/lib/python3.13/site-packages/s3fs/core.py:2389\u001b[39m, in \u001b[36mS3File._fetch_range\u001b[39m\u001b[34m(self, start, end)\u001b[39m\n\u001b[32m   2378\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m _fetch_range(\n\u001b[32m   2379\u001b[39m         \u001b[38;5;28mself\u001b[39m.fs,\n\u001b[32m   2380\u001b[39m         \u001b[38;5;28mself\u001b[39m.bucket,\n\u001b[32m   (...)\u001b[39m\u001b[32m   2385\u001b[39m         req_kw=\u001b[38;5;28mself\u001b[39m.req_kw,\n\u001b[32m   2386\u001b[39m     )\n\u001b[32m   2388\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mOSError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m ex:\n\u001b[32m-> \u001b[39m\u001b[32m2389\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m ex.args[\u001b[32m0\u001b[39m] == errno.EINVAL \u001b[38;5;129;01mand\u001b[39;00m \u001b[33;43m\"\u001b[39;49m\u001b[33;43mpre-conditions\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mex\u001b[49m\u001b[43m.\u001b[49m\u001b[43margs\u001b[49m\u001b[43m[\u001b[49m\u001b[32;43m1\u001b[39;49m\u001b[43m]\u001b[49m:\n\u001b[32m   2390\u001b[39m         \u001b[38;5;28;01mraise\u001b[39;00m FileExpired(\n\u001b[32m   2391\u001b[39m             filename=\u001b[38;5;28mself\u001b[39m.details[\u001b[33m\"\u001b[39m\u001b[33mname\u001b[39m\u001b[33m\"\u001b[39m], e_tag=\u001b[38;5;28mself\u001b[39m.details.get(\u001b[33m\"\u001b[39m\u001b[33mETag\u001b[39m\u001b[33m\"\u001b[39m)\n\u001b[32m   2392\u001b[39m         ) \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mex\u001b[39;00m\n\u001b[32m   2393\u001b[39m     \u001b[38;5;28;01melse\u001b[39;00m:\n\n\u001b[31mTypeError\u001b[39m: argument of type 'NoneType' is not iterable","ename":"TypeError","evalue":"argument of type 'NoneType' is not iterable"}],"key":"z52kPaqsHn"}],"key":"wZpVrzCkrC"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Find the indices of the boundary layer depth - in case we happen to care about that later","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ujsDHgzVuc"}],"identifier":"find-the-indices-of-the-boundary-layer-depth-in-case-we-happen-to-care-about-that-later","label":"Find the indices of the boundary layer depth - in case we happen to care about that later","html_id":"find-the-indices-of-the-boundary-layer-depth-in-case-we-happen-to-care-about-that-later","implicit":true,"key":"L7ScYQjNZ4"}],"key":"xl6Ul8OtK8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds_stat[\"bottom_top\"] = ds_stat.bottom_top\nds_stat\nki = ds_stat['CSP_THL'].idxmin(dim='bottom_top')\nki.load()","key":"CRA0Uf9AnI"},{"type":"output","id":"e5ANybdU4govEkjEjUI5y","data":[],"key":"I99CdoX62l"}],"key":"kJt2COHTlb"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Let’s look at some meteorological info for this date","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hwaBsYkC7e"}],"identifier":"lets-look-at-some-meteorological-info-for-this-date","label":"Let’s look at some meteorological info for this date","html_id":"lets-look-at-some-meteorological-info-for-this-date","implicit":true,"key":"HexnbqSxWU"}],"key":"BQnfsNjqqD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_ql = ds_stat['CSP_QL'].assign_coords(height = (ds_stat[\"CSP_Z\"]))\nplot_ql.isel(Time=slice(6,None)).plot(x = 'Time',y = 'height', ylim=[0,7000])","key":"mvp6j7822D"},{"type":"output","id":"CfglDiaW45fIV4Ug6vrJU","data":[],"key":"wpi6dKje2k"}],"key":"UR7LKGqqap"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_lwc = ds_stat['CSP_LWC'].assign_coords(height = (ds_stat[\"CSP_Z\"]))\nplot_lwc.isel(Time=slice(6,None)).plot(x = 'Time',y = 'height', ylim=[0,7000])","key":"AHCajvPUuw"},{"type":"output","id":"L48FmytnC8lWRApmGQuvS","data":[],"key":"SnY08AcwIP"}],"key":"sJw1tHFNeM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot_thl = ds_stat['CSP_TH'].assign_coords(height = (ds_stat[\"CSP_Z\"]))\nplot_thl.isel(Time=slice(6,None)).plot(x = 'Time',y = 'height', ylim=[0,7000],vmin=298,vmax=320)","key":"OXTiJJOcY5"},{"type":"output","id":"Zd_ho0C53941Dql34PXbb","data":[],"key":"DuMguLiDNC"}],"key":"wIe4tEHaSF"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Fix some height things so that we can plot...","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dw51pQ2GCY"}],"identifier":"fix-some-height-things-so-that-we-can-plot","label":"Fix some height things so that we can plot...","html_id":"fix-some-height-things-so-that-we-can-plot","implicit":true,"key":"mRCaPYbz2X"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The z values are time dependent, so we need to deal with the height values by assuming that the first time step is close enough","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"TtXiCmJFer"}],"key":"w9JIxehFtd"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"We also need to make bottom_top a coordinate so that we aren’t yelled at by errors","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"C8ZMTFEoRm"}],"key":"sjxgR8hZ48"}],"key":"CmmxV8NtgL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds_stat[\"bottom_top\"] = ds_stat.bottom_top","key":"Oi0w75Q3Ku"},{"type":"output","id":"6IVKC8TAq0lgZBM_Z40fa","data":[],"key":"Nspz5khxng"}],"key":"F62dIILCwk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds_stat['bottom_top'] = ds_stat['CSP_Z'].isel(Time = 1).values","key":"nkLvnYMvbW"},{"type":"output","id":"tQ4D1Ezf23MSJOCPPP2Lz","data":[],"key":"WXF5uY9qOL"}],"key":"AulLXh6iFp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds_stat['bottom_top'].values # make sure that these are heights and not indicies","key":"V2MxF6cuYL"},{"type":"output","id":"X7sWF2p0fRRyG1hbhFKba","data":[],"key":"ZkhTQ51XfY"}],"key":"lrFWnFDGVL"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Calculate cloud base and top from the liquid water conent and the liquid water mixing ratio","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MVed4MpBoE"}],"identifier":"calculate-cloud-base-and-top-from-the-liquid-water-conent-and-the-liquid-water-mixing-ratio","label":"Calculate cloud base and top from the liquid water conent and the liquid water mixing ratio","html_id":"calculate-cloud-base-and-top-from-the-liquid-water-conent-and-the-liquid-water-mixing-ratio","implicit":true,"key":"FBHbSkEqhn"}],"key":"kWyVv1L9S1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds_stat['cb_lwc'] = (ds_stat['CSP_LWC']>0).idxmax(dim = 'bottom_top')\nds_stat['cb_lwc'] = ds_stat['cb_lwc'].where(ds_stat['cb_lwc']>ds_stat['bottom_top'][0])\nprint(ds_stat['cb_lwc'])\n\nds_stat['ct_lwc'] = ((ds_stat['CSP_LWC'].isel(bottom_top = slice(None, None, -1)))>0).idxmax(dim='bottom_top')\nds_stat['ct_lwc'] = ds_stat['ct_lwc'].where(ds_stat['ct_lwc']<ds_stat['bottom_top'][-1])\nprint(ds_stat['ct_lwc'])","key":"WfEWNnPDom"},{"type":"output","id":"7edmpV71XBeMQW87wB94R","data":[],"key":"x7RZpI1lKD"}],"key":"QQz6r51jCj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds_stat['cb_lwc'].plot(label='base',ylim = (0,7000),xlim = (ds_stat['CSP_Z'].Time[6],ds_stat['CSP_Z'].Time[-1]))\nds_stat['ct_lwc'].plot(label='top',ylim = (0,7000),xlim = (ds_stat['CSP_Z'].Time[6],ds_stat['CSP_Z'].Time[-1]))\nplt.legend()\nplt.ylabel('Height (m)')\nplt.xlabel('Time (UTC)')\nplt.show()","key":"a4F0jWD12J"},{"type":"output","id":"ZnMZisAi7-gHaII34Rsmk","data":[],"key":"uEQZkRTPDu"}],"key":"IOMZjQAKSf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds_stat['cb_ql'] = (ds_stat['CSP_LWC']>0).idxmax(dim = 'bottom_top')\nds_stat['cb_ql'] = ds_stat['cb_ql'].where(ds_stat['cb_ql']>ds_stat['bottom_top'][0])\nprint(ds_stat['cb_ql'].load())\n\nds_stat['ct_ql'] = ((ds_stat['CSP_LWC'].isel(bottom_top = slice(None, None, -1)))>0).idxmax(dim='bottom_top')\nds_stat['ct_ql'] = ds_stat['ct_ql'].where(ds_stat['ct_ql']<ds_stat['bottom_top'][-1])\nprint(ds_stat['ct_ql'].load())","key":"JS93Wt9kSA"},{"type":"output","id":"WVmCZwM9X9b44kAjozINl","data":[],"key":"WReZtLcUBl"}],"key":"pcsA7foKen"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds_stat['cb_ql'].plot(label='base',ylim = (0,7000),xlim = (ds_stat['CSP_Z'].Time[6],ds_stat['CSP_Z'].Time[-1]))\nds_stat['ct_ql'].plot(label='top',ylim = (0,7000),xlim = (ds_stat['CSP_Z'].Time[6],ds_stat['CSP_Z'].Time[-1]))\nplt.legend()\nplt.ylabel('Height (m)')\nplt.xlabel('Time (UTC)')\nplt.show()","key":"BlQf82X4MU"},{"type":"output","id":"uxx67kxMkXOQLWvlBO-IP","data":[],"key":"wdBEYjll1V"}],"key":"M7q4z0v9O3"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Conclusions","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UEACft9rNN"}],"identifier":"conclusions","label":"Conclusions","html_id":"conclusions","implicit":true,"key":"APJpUHWCWR"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"We notice how similar the cloud base/top are at their beginning and end times! This framework enables a streamlined method of analyzing clouds within the simulation data, including derived quantities such as cloud base/height.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"XopMc1yf97"}],"key":"u3pOlZTv94"}],"key":"nhtCJqMBIi"}],"key":"UomJbsO3Vx"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Simulation vs Observational Data of Shallow Cumulus Clouds over the Southern Great Plains on April 4th, 2019","url":"/notebooks/lassoarmclouds","group":"Observations for April 4, 2019"},"next":{"title":"Load in necessary packages","url":"/notebooks/moisture-divergence","group":"LASSO Simulation April 4, 2019 - Surface Moisture Convergence"}}},"domain":"http://localhost:3000"}